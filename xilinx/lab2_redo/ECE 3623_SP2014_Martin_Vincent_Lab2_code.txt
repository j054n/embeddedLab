`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    22:09:46 02/08/2014 
// Design Name: 
// Module Name:    bcd_add_controller 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module bcd_add_controller(
			//input from the outside world.
			input clock,
			input load_a_input,
			input load_b_input,
			input display_ls_input,
			input display_ms_input,
			
			//inputs back from the datapath.
			input init_ack,
			input load_a_ack,
			input load_b_ack,
			input display_a_ack,
			input display_b_ack,
			input display_ls_ack,
			input display_ms_ack,
			
			//outputs to the datpath.
			output reg init,
			output reg load_a,
			output reg load_b,
			output reg display_a,
			output reg display_b,
			output reg display_ls,
			output reg display_ms
			);
	 
	//Let us declare our states in a friendly manner and then make a register to hold them.
	parameter INIT_STATE = 0,
				LOAD_A_STATE = 1,
				DISPLAY_A_STATE = 2,
				LOAD_B_STATE = 3,
				DISPLAY_B_STATE = 4,
				DISPLAY_LS_STATE = 5,
				DISPLAY_MS_STATE = 6;
			
	reg [2:0] state = INIT_STATE; //Set the default state to INIT_STATE.
	
	//Let's now create the logic of the state machine.
	always @(posedge clock)
		begin
			
			if(state == INIT_STATE) //Given init reset everything.
				begin
					#20;
					//set all output values to default states.
					init <= 1;
					load_a <= 0;
					load_b <= 0;
					display_a <= 0;
					display_b <= 0;
					display_ls <= 0;
					display_ms <= 0;
					
					if(init_ack == 1) begin
						if(load_a_input) state <= DISPLAY_A_STATE;
						if(load_b_input) state <= DISPLAY_B_STATE;
						if(display_ls_input) state <= DISPLAY_LS_STATE;
						if(display_ms_input) state <= DISPLAY_MS_STATE;
					end
						
				end
				
			else
				case(state)
					LOAD_A_STATE: begin
						#20;
						//Set the output signals.
						if(load_a_ack) state <= DISPLAY_A_STATE;
						
						init <= 0;
						load_a <= 1;
						load_b <= 0;
						display_a <= 0;
						display_b <= 0;
						display_ls <= 0;
						display_ms <= 0;
						
						
						
					end
					
					DISPLAY_A_STATE: begin
						#20;
						//Now that loading is done, unset load_a and set display_a.
						
						//Set the output signals.
						init <= 0;
						load_a <= 0;
						load_b <= 0;
						display_a <= 1;
						display_b <= 0;
						display_ls <= 0;
						display_ms <= 0;
						
						//Wait in this state unless the following buttons happen.
						if(display_a_ack) begin //added recently...
							//Unset display_a flag.
							//display_a <= 0;
							if(load_a_input) state <= LOAD_A_STATE;
							if(load_b_input) state <= LOAD_B_STATE;
							if(display_ls_input) state <= DISPLAY_LS_STATE;
							if(display_ms_input) state <= DISPLAY_MS_STATE;
						end
					end
					
					LOAD_B_STATE: begin
						#20;
						if(load_b_ack) state <= DISPLAY_B_STATE;
							
						//Set the output signals.
						init <= 0;
						load_a <= 0;
						load_b <= 1;
						display_a <= 0;
						display_b <= 0;
						display_ls <= 0;
						display_ms <= 0;
						
					end
								
					DISPLAY_B_STATE: begin
						#20;
						//load_b_ack <= 0; //clear the load_a_ack flag from LOAD_B_STATE
						//Now that loading is done, unset load_b and set display_b.
							
						//Set the output signals.
						init <= 0;
						load_a <= 0;
						load_b <= 0;
						display_a <= 0;
						display_b <= 1;
						display_ls <= 0;
						display_ms <= 0;
						
						//Wait in this state unless the following buttons happen.
						if(display_b_ack) begin //added recently...
							//Unset display_a flag.
							//display_b <= 0;
							if(load_a_input) state <= LOAD_A_STATE;
							if(load_b_input) state <= LOAD_B_STATE;
							if(display_ls_input) state <= DISPLAY_LS_STATE;
							if(display_ms_input) state <= DISPLAY_MS_STATE;
						end
					end
					
					DISPLAY_LS_STATE: begin
						#20;
						//Set the output signals.
						init <= 0;
						load_a <= 0;
						load_b <= 0;
						display_a <= 0;
						display_b <= 0;
						display_ls <= 1;
						display_ms <= 0;
						
						//Wait in this state unless the following buttons happen.
						if(display_ls_ack) begin
							//Set display_ls back to 0 once it is displayed.
							//display_ls <= 0;
							
							if(load_a_input) state <= LOAD_A_STATE;
							if(load_b_input) state <= LOAD_B_STATE;
							if(display_ls_input) state <= DISPLAY_LS_STATE;
							if(display_ms_input) state <= DISPLAY_MS_STATE;
						end
					end
					
					DISPLAY_MS_STATE: begin
						#20;	
						//Set the output signals.
						init <= 0;
						load_a <= 0;
						load_b <= 0;
						display_a <= 0;
						display_b <= 0;
						display_ls <= 0;
						display_ms <= 1;
						
						//Wait in this state unless the following buttons happen.
						if(display_ms_ack) begin
							//Set the display_ms back to 0 once the display_ms_ack comes.
							//display_ms <= 0;
							
							if(load_a_input) state <= LOAD_A_STATE;
							if(load_b_input) state <= LOAD_B_STATE;
							if(display_ls_input) state <= DISPLAY_LS_STATE;
							if(display_ms_input) state <= DISPLAY_MS_STATE;
						end
					end
				endcase
			end		
					
					
  

 endmodule


 `timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    22:14:28 02/08/2014 
// Design Name: 
// Module Name:    bcd_add_datapath 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module bcd_add_datapath(
				//Input from the outside world.
				input clock,
				input [6:0] input_value,
				
				//Input from the bcd_add_controller.
				input init,
				input load_a,
				input load_b,
				input display_a,
				input display_b,
				input display_ls,
				input display_ms,
				
				//Output back to the bcd_add_controller all set to 0 initially.
				output reg init_ack = 0,
				output reg load_a_ack = 0,
				output reg load_b_ack = 0,
				output reg display_a_ack = 0,
				output reg display_b_ack = 0,
				output reg display_ls_ack = 0,
				output reg display_ms_ack = 0
				
				//Output to the outside world.
				//output reg [7:0] output_value = 0
    );
	
	
	
	//Set some temorary registers for the math.
	reg [6:0] A = 0;
	reg [6:0] B = 0;
	reg [7:0] C = 0;
	
	//This is to supress warnings that were gained by removing the output above.
	reg [7:0] output_value = 0;
	
	
		
	//Run through all the logic.
	always @(posedge clock) begin
		//Always add up A + B = C.
		//C = A + B;
		
		if(init)
			begin
				//Set the ACK flags.
				init_ack = 1;
				load_a_ack = 0;
				load_b_ack = 0;
				display_a_ack = 0;
				display_b_ack = 0;
				display_ls_ack = 0;
				display_ms_ack = 0;
			end
			
			
		if(load_a)
			begin
				A = input_value;
				
				//Set the ACK flags.
				init_ack = 0;
				load_a_ack = 1;
				load_b_ack = 0;
				display_a_ack = 0;
				display_b_ack = 0;
				display_ls_ack = 0;
				display_ms_ack = 0;
				
			end
			
		if(display_a)
			begin
				//output_value = A; //Put A on the LED.
				
				//Set the ACK flags.
				init_ack = 0;
				load_a_ack = 0;
				load_b_ack = 0;
				display_a_ack = 1;
				display_b_ack = 0;
				display_ls_ack = 0;
				display_ms_ack = 0;
				
			end
			
		if(load_b)
			begin
				B = input_value;
				
				//Set the ACK flags.
				init_ack = 0;
				load_a_ack = 0;
				load_b_ack = 1;
				display_a_ack = 0;
				display_b_ack = 0;
				display_ls_ack = 0;
				display_ms_ack = 0;
			end
			
		if(display_b)
			begin
				//output_value = B;
				
				//Set the ACK flags.
				init_ack = 0;
				load_a_ack = 0;
				load_b_ack = 0;
				display_a_ack = 0;
				display_b_ack = 1;
				display_ls_ack = 0;
				display_ms_ack = 0;
				
			end
		
		if(display_ls)
			begin
				output_value = A+B;
				
				//Set the ACK flags.
				init_ack = 0;
				load_a_ack = 0;
				load_b_ack = 0;
				display_a_ack = 0;
				display_b_ack = 0;
				display_ls_ack = 1;
				display_ms_ack = 0;
				
			end
			
		if(display_ms)
			begin
				output_value = A+B;
				
				//Set the ACK flags.
				init_ack = 0;
				load_a_ack = 0;
				load_b_ack = 0;
				display_a_ack = 0;
				display_b_ack = 0;
				display_ls_ack = 0;
				display_ms_ack = 1;
				
			end
			
	end
		

endmodule

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    17:17:45 01/31/2014 
// Design Name: 
// Module Name:    BCD_From_7bit_Binary 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module BCD_From_7bit_Binary(
    input [6:0] inputNumber,
    output reg [3:0] mostSignificant,
    output reg [3:0] leastSignificant
    );

    /*
    The following procedural block will evaulate the math to determine the BCD format whenever the inputNumber is changed.
    */ 
    always@(inputNumber)
    begin
        mostSignificant = inputNumber/10;
        leastSignificant = inputNumber%10;		
    end
    

endmodule


// Nexys3 and Atlys Spartan-6 FPGA Board
// Crystal Clock Oscillator  clkosc.v
// c 2012 Embedded Design using Programmable Gate Arrays
//        Second Edition   Dennis Silage

module clock(input CLK, input [31:0] clkscale, output reg sclclk);
									// CLK crystal clock oscillator 100 MHz
reg [31:0] clkq = 0;			// clock register, initial value of 0
	
always@(posedge CLK)
	begin
		clkq=clkq+1;			// increment clock register
			if (clkq>=clkscale)  	// clock scaling
				begin
					sclclk=~sclclk;	// output clock
					clkq=0;		// reset clock register
				end
	 end

endmodule

