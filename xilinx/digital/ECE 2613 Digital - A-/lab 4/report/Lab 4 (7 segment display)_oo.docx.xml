<?xml version="1.0"?>
<root ptr="0x235b5d0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x7f674c035000"><page ptr="0x7f674c035000" next="0x7f674c0350e0" prev="(nil)" upper="0x235b5d0" lower="0x7f674c037000"><body ptr="0x7f674c037000" next="0x7f674c038000" prev="(nil)" upper="0x7f674c035000" lower="0x7f674c039110"><txt ptr="0x7f674c039110" next="0x7f674c039220" prev="(nil)" upper="0x7f674c037000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c039220" next="0x7f674c039330" prev="0x7f674c039110" upper="0x7f674c037000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c039330" next="0x7f674c039440" prev="0x7f674c039220" upper="0x7f674c037000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c039440" next="0x7f674c039550" prev="0x7f674c039330" upper="0x7f674c037000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c039550" next="0x7f674c039660" prev="0x7f674c039440" upper="0x7f674c037000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c039660" next="0x7f674c039770" prev="0x7f674c039550" upper="0x7f674c037000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c039770" next="0x7f674c039880" prev="0x7f674c039660" upper="0x7f674c037000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c039880" next="0x7f674c039990" prev="0x7f674c039770" upper="0x7f674c037000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c039990" next="0x7f674c039aa0" prev="0x7f674c039880" upper="0x7f674c037000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c039aa0" next="0x7f674c039bb0" prev="0x7f674c039990" upper="0x7f674c037000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c039bb0" next="0x7f674c039cc0" prev="0x7f674c039aa0" upper="0x7f674c037000" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c039cc0" next="0x7f674c039dd0" prev="0x7f674c039bb0" upper="0x7f674c037000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c039dd0" next="0x7f674c040008" prev="0x7f674c039cc0" upper="0x7f674c037000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c040008" next="0x7f674c040118" prev="0x7f674c039dd0" upper="0x7f674c037000" lower="(nil)">Utilizing the Seven Segment Display on a Nexys2 Board with Case<Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="53" nType="POR_TXT"/><Text nLength="1" nType="POR_HOLE"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="9" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c040118" next="0x7f674c040228" prev="0x7f674c040008" upper="0x7f674c037000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c040228" next="0x7f674c040338" prev="0x7f674c040118" upper="0x7f674c037000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c040338" next="0x7f674c040448" prev="0x7f674c040228" upper="0x7f674c037000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c040448" next="0x7f674c040558" prev="0x7f674c040338" upper="0x7f674c037000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c040558" next="0x7f674c040668" prev="0x7f674c040448" upper="0x7f674c037000" lower="(nil)">Vincent Martin<Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="14" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c040668" next="0x7f674c040778" prev="0x7f674c040558" upper="0x7f674c037000" lower="(nil)">TUID: 913012274<Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="15" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c040778" next="0x7f674c040888" prev="0x7f674c040668" upper="0x7f674c037000" lower="(nil)">ECE 2613<Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="8" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c040888" next="0x7f674c040998" prev="0x7f674c040778" upper="0x7f674c037000" lower="(nil)">Lab #: 4 (9/21/2012)<Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="20" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c040998" next="(nil)" prev="0x7f674c040888" upper="0x7f674c037000" lower="(nil)"><Finish/></txt></body><footer ptr="0x7f674c038000" next="(nil)" prev="0x7f674c037000" upper="0x7f674c035000" lower="0x7f674c039000"><txt ptr="0x7f674c039000" next="(nil)" prev="(nil)" upper="0x7f674c038000" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt></footer></page><page ptr="0x7f674c0350e0" next="0x7f674c0351c0" prev="0x7f674c035000" upper="0x235b5d0" lower="0x7f674c0370c0"><body ptr="0x7f674c0370c0" next="0x7f674c0380c0" prev="(nil)" upper="0x7f674c0350e0" lower="0x7f674c040aa8"><txt ptr="0x7f674c040aa8" next="0x7f674c040cc8" prev="(nil)" upper="0x7f674c0370c0" lower="(nil)">Introduction:<Text nLength="13" nType="POR_PARA"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c040cc8" next="0x7f674c040dd8" prev="0x7f674c040aa8" upper="0x7f674c0370c0" lower="(nil)">The objective of this lab is to utilize our understanding of Verilog and the Sum of Products method to create a Verilog module that will use input based on switches to drive the seven segment display built into our Xilinx test board, test it, and finally implement it on the board itself.<Text nLength="73" nType="POR_PARA"/><LineBreak/><Text nLength="68" nType="POR_LAY"/><LineBreak/><Text nLength="70" nType="POR_LAY"/><LineBreak/><Text nLength="77" nType="POR_LAY"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c040dd8" next="0x7f674c041010" prev="0x7f674c040cc8" upper="0x7f674c0370c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c041010" next="0x7f674c041120" prev="0x7f674c040dd8" upper="0x7f674c0370c0" lower="(nil)">The difference between this lab and our previous lab is that we will be using a procedural method along with a case statement to define the logic for our svn segment display. This will result in the use of less code and also will prove to be more understandable while reading the source code.<Text nLength="72" nType="POR_PARA"/><LineBreak/><Text nLength="68" nType="POR_LAY"/><LineBreak/><Text nLength="75" nType="POR_TXT"/><Text nLength="1" nType="POR_HOLE"/><LineBreak/><Text nLength="70" nType="POR_TXT"/><Text nLength="1" nType="POR_HOLE"/><LineBreak/><Text nLength="5" nType="POR_LAY"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c041120" next="0x7f674c041230" prev="0x7f674c041010" upper="0x7f674c0370c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c041230" next="0x7f674c041340" prev="0x7f674c041120" upper="0x7f674c0370c0" lower="(nil)">*<Special nLength="1" nType="POR_POSTITS" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c041340" next="0x7f674c041450" prev="0x7f674c041230" upper="0x7f674c0370c0" lower="(nil)">The Theory of our Seven Segment Display:<Text nLength="40" nType="POR_PARA"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c041450" next="0x7f674c041560" prev="0x7f674c041340" upper="0x7f674c0370c0" lower="(nil)">To drive the display we will need to create a module that has two inputs. One being a 4 bit bus that will represent the 4 switches we are using to to create binary numbers. The second input will be the 1 bit status of a 5th switch. These inputs will result in an output of 7 bits into the seg_out bus.<Text nLength="66" nType="POR_PARA"/><LineBreak/><Text nLength="72" nType="POR_LAY"/><LineBreak/><Text nLength="70" nType="POR_LAY"/><LineBreak/><Text nLength="76" nType="POR_TXT"/><Text nLength="1" nType="POR_HOLE"/><LineBreak/><Text nLength="16" nType="POR_LAY"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c041560" next="0x7f674c041670" prev="0x7f674c041450" upper="0x7f674c0370c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c041670" next="0x7f674c041780" prev="0x7f674c041560" upper="0x7f674c0370c0" lower="(nil)">When the 5th switch is on and the remaining 4 switches are set the end user will be able to control what gets sent to the seven segment display components by the seg_out bus. Otherwise we will see no display if the 5th switch is off.<Text nLength="67" nType="POR_PARA"/><LineBreak/><Text nLength="69" nType="POR_LAY"/><LineBreak/><Text nLength="64" nType="POR_LAY"/><LineBreak/><Text nLength="33" nType="POR_LAY"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c041780" next="0x7f674c041890" prev="0x7f674c041670" upper="0x7f674c0370c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c041890" next="0x7f674c0419a0" prev="0x7f674c041780" upper="0x7f674c0370c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c0419a0" next="0x7f674c041ab0" prev="0x7f674c041890" upper="0x7f674c0370c0" lower="(nil)">Applying the Theory to Hardware:<Text nLength="32" nType="POR_PARA"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c041ab0" next="0x7f674c041bc0" prev="0x7f674c0419a0" upper="0x7f674c0370c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c041bc0" next="0x7f674c041cd0" prev="0x7f674c041ab0" upper="0x7f674c0370c0" lower="(nil)">In order to transfer our understanding of theory to our Nexys2 hardware board we will have to write a Verilog code module that represents the block diagram seen in figure 1*. <Text nLength="63" nType="POR_PARA"/><LineBreak/><Text nLength="64" nType="POR_LAY"/><LineBreak/><Text nLength="45" nType="POR_TXT"/><Special nLength="1" nType="POR_POSTITS" rText=""/><Text nLength="2" nType="POR_TXT"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c041cd0" next="0x7f674c041de0" prev="0x7f674c041bc0" upper="0x7f674c0370c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c041de0" next="0x7f674c042018" prev="0x7f674c041cd0" upper="0x7f674c0370c0" lower="(nil)">Module Description:<Text nLength="19" nType="POR_PARA"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c042018" next="0x7f674c042128" prev="0x7f674c041de0" upper="0x7f674c0370c0" lower="(nil)">Input<Special nLength="0" nType="POR_BULLET" rText="&#x2022;"/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="5" nType="POR_TXT"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c042128" next="0x7f674c042238" prev="0x7f674c042018" upper="0x7f674c0370c0" lower="(nil)">bcd_in: 4 bit mapped to switches 0 to 3 on the board.<Special nLength="0" nType="POR_BULLET" rText="&#x25E6;"/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="53" nType="POR_TXT"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c042238" next="0x7f674c042348" prev="0x7f674c042128" upper="0x7f674c0370c0" lower="(nil)">display_on: 1 bit mapped to switch 4 on the board.<Special nLength="0" nType="POR_BULLET" rText="&#x25E6;"/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="50" nType="POR_TXT"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c042348" next="0x7f674c042458" prev="0x7f674c042238" upper="0x7f674c0370c0" lower="(nil)">Output<Special nLength="0" nType="POR_BULLET" rText="&#x2022;"/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="6" nType="POR_TXT"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c042458" next="0x7f674c042568" prev="0x7f674c042348" upper="0x7f674c0370c0" lower="(nil)">seg_out: 7 bit mapped to each particular segment of the seven segment display as seen in figure 2.<Special nLength="0" nType="POR_BULLET" rText="&#x25E6;"/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="56" nType="POR_TXT"/><LineBreak/><Text nLength="42" nType="POR_LAY"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c042568" next="0x7f674c042678" prev="0x7f674c042458" upper="0x7f674c0370c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c042678" next="(nil)" prev="0x7f674c042568" upper="0x7f674c0370c0" lower="(nil)">Figure 1 : Block diagram for the svn_seg_decoder<Text nLength="48" nType="POR_PARA"/><LineBreak/><Finish/></txt></body><footer ptr="0x7f674c0380c0" next="(nil)" prev="0x7f674c0370c0" upper="0x7f674c0350e0" lower="0x7f674c040bb8"><txt ptr="0x7f674c040bb8" next="(nil)" prev="(nil)" upper="0x7f674c0380c0" lower="(nil)"><Text nLength="0" nType="POR_PARA"/><LineBreak/><Finish/></txt></footer></page><page ptr="0x7f674c0351c0" next="0x7f674c0352a0" prev="0x7f674c0350e0" upper="0x235b5d0" lower="0x7f674c037180"><body ptr="0x7f674c037180" next="0x7f674c038180" prev="(nil)" upper="0x7f674c0351c0" lower="0x7f674c042788"><txt ptr="0x7f674c042788" next="0x7f674c0429a8" prev="(nil)" upper="0x7f674c037180" lower="(nil)"><anchored><fly ptr="0x235c7b0" next="(nil)" prev="(nil)" upper="(nil)" lower="0x23a8de0"><txt ptr="0x23a8de0" next="(nil)" prev="(nil)" upper="0x235c7b0" lower="(nil)"/></fly></anchored><Special nLength="0" nType="POR_FLY" rText=""/><LineBreak/><Text nLength="0" nType="POR_LAY"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c0429a8" next="0x7f674c042ab8" prev="0x7f674c042788" upper="0x7f674c037180" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c042ab8" next="0x7f674c042bc8" prev="0x7f674c0429a8" upper="0x7f674c037180" lower="(nil)"><Text nLength="0" nType="POR_PARA"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c042bc8" next="0x7f674c042cd8" prev="0x7f674c042ab8" upper="0x7f674c037180" lower="(nil)">Figure 2 : Seven Segment Display Diagram<Text nLength="40" nType="POR_PARA"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c042cd8" next="0x7f674c042de8" prev="0x7f674c042bc8" upper="0x7f674c037180" lower="(nil)"><anchored><fly ptr="0x235db50" next="(nil)" prev="(nil)" upper="(nil)" lower="0x235def0"><txt ptr="0x235def0" next="(nil)" prev="(nil)" upper="0x235db50" lower="(nil)"/></fly></anchored><Special nLength="0" nType="POR_MARGIN" rText=""/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c042de8" next="0x7f674c043020" prev="0x7f674c042cd8" upper="0x7f674c037180" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c043020" next="0x7f674c043130" prev="0x7f674c042de8" upper="0x7f674c037180" lower="(nil)">Additionally we will want to implement a testing module based on Figure 3*. This scheme will utilize a .txt file, based on our truth table, which will allow us to test all of our expected outcomes. This text file will be included in the lab report.<Text nLength="65" nType="POR_PARA"/><LineBreak/><Text nLength="8" nType="POR_TXT"/><Special nLength="1" nType="POR_POSTITS" rText=""/><Text nLength="66" nType="POR_TXT"/><LineBreak/><Text nLength="73" nType="POR_LAY"/><LineBreak/><Text nLength="35" nType="POR_LAY"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c043130" next="0x7f674c043240" prev="0x7f674c043020" upper="0x7f674c037180" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c043240" next="0x7f674c043350" prev="0x7f674c043130" upper="0x7f674c037180" lower="(nil)">Figure 3: Testing methods<Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="25" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c043350" next="0x7f674c043460" prev="0x7f674c043240" upper="0x7f674c037180" lower="(nil)"><anchored><fly ptr="0x235bb70" next="(nil)" prev="(nil)" upper="(nil)" lower="0x235bef0"><txt ptr="0x235bef0" next="(nil)" prev="(nil)" upper="0x235bb70" lower="(nil)"/></fly></anchored><Special nLength="0" nType="POR_FLY" rText=""/><LineBreak/><Text nLength="0" nType="POR_LAY"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c043460" next="0x7f674c043570" prev="0x7f674c043350" upper="0x7f674c037180" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt><txt ptr="0x7f674c043570" next="0x7f674c043680" prev="0x7f674c043460" upper="0x7f674c037180" lower="(nil)"> <Text nLength="1" nType="POR_PARA"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c043680" next="(nil)" prev="0x7f674c043570" upper="0x7f674c037180" lower="(nil)"><Finish/></txt></body><footer ptr="0x7f674c038180" next="(nil)" prev="0x7f674c037180" upper="0x7f674c0351c0" lower="0x7f674c042898"><txt ptr="0x7f674c042898" next="(nil)" prev="(nil)" upper="0x7f674c038180" lower="(nil)"><Special nLength="0" nType="POR_MARGIN" rText=""/><Text nLength="0" nType="POR_TXT"/><Special nLength="0" nType="POR_MARGIN" rText=""/><LineBreak/><Finish/></txt></footer></page><page ptr="0x7f674c0352a0" next="0x7f674c035380" prev="0x7f674c0351c0" upper="0x235b5d0" lower="0x7f674c037240"><body ptr="0x7f674c037240" next="0x7f674c038240" prev="(nil)" upper="0x7f674c0352a0" lower="0x7f674c043790"><txt ptr="0x7f674c043790" next="0x7f674c0438a0" prev="(nil)" upper="0x7f674c037240" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c0438a0" next="0x7f674c043ac0" prev="0x7f674c043790" upper="0x7f674c037240" lower="(nil)">Procedure:<Text nLength="10" nType="POR_PARA"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c043ac0" next="0x7f674c043bd0" prev="0x7f674c0438a0" upper="0x7f674c037240" lower="(nil)">Create the Truth Table and Formula<Text nLength="34" nType="POR_PARA"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c043bd0" next="0x7f674c043ce0" prev="0x7f674c043ac0" upper="0x7f674c037240" lower="(nil)">Create a truth table for our module (figure 4).<Special nLength="0" nType="POR_NUMBER" rText="1."/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="47" nType="POR_TXT"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c043ce0" next="0x7f674c043df0" prev="0x7f674c043bd0" upper="0x7f674c037240" lower="(nil)">Calculate the equations that will result in seg_out lighting the appropriate segments in regards to the input of bcd_in and display_on.<Special nLength="0" nType="POR_NUMBER" rText="2."/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="65" nType="POR_TXT"/><LineBreak/><Text nLength="59" nType="POR_LAY"/><LineBreak/><Text nLength="11" nType="POR_LAY"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c043df0" next="0x7f674c044028" prev="0x7f674c043ce0" upper="0x7f674c037240" lower="(nil)">Use the results of the truth table to create a Equations found below in Figure 5.<Special nLength="0" nType="POR_NUMBER" rText="3."/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="63" nType="POR_TXT"/><LineBreak/><Text nLength="18" nType="POR_LAY"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c044028" next="0x7f674c044138" prev="0x7f674c043df0" upper="0x7f674c037240" lower="(nil)">*Implement the Design in Software<Text nLength="1" nType="POR_BRK"/><LineBreak/><Text nLength="32" nType="POR_LAY"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c044138" next="0x7f674c044248" prev="0x7f674c044028" upper="0x7f674c037240" lower="(nil)">Make a secure connection to electro9.eng.temple.edu using the no machine client.<Special nLength="0" nType="POR_NUMBER" rText="1."/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="62" nType="POR_TXT"/><LineBreak/><Text nLength="18" nType="POR_LAY"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c044248" next="0x7f674c044358" prev="0x7f674c044138" upper="0x7f674c037240" lower="(nil)">Once terminal opens on the local workstation type the ‘remote_xilinx.sh’ shell command to launch the ISE development environment.<Special nLength="0" nType="POR_NUMBER" rText="2."/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="54" nType="POR_TXT"/><LineBreak/><Text nLength="63" nType="POR_LAY"/><LineBreak/><Text nLength="12" nType="POR_LAY"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c044358" next="0x7f674c044468" prev="0x7f674c044248" upper="0x7f674c037240" lower="(nil)">Open the lab3 seven segment project in ~/Xilinx/lab3/ directory.<Special nLength="0" nType="POR_NUMBER" rText="3."/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="64" nType="POR_TXT"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c044468" next="0x7f674c044578" prev="0x7f674c044358" upper="0x7f674c037240" lower="(nil)">Modify the svn_seg_out.v source code to implement your algorithm by navigating to<Special nLength="0" nType="POR_NUMBER" rText="4."/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="55" nType="POR_TXT"/><LineBreak/><Text nLength="26" nType="POR_LAY"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c044578" next="0x7f674c044688" prev="0x7f674c044468" upper="0x7f674c037240" lower="(nil)">View: Implementation<Special nLength="0" nType="POR_BULLET" rText="o"/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="20" nType="POR_TXT"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c044688" next="0x7f674c044798" prev="0x7f674c044578" upper="0x7f674c037240" lower="(nil)">xc3s500e-4f6320<Special nLength="0" nType="POR_BULLET" rText="&#xF0A7;"/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="15" nType="POR_TXT"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c044798" next="0x7f674c0448a8" prev="0x7f674c044688" upper="0x7f674c037240" lower="(nil)">Save all files.<Special nLength="0" nType="POR_NUMBER" rText="5."/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="15" nType="POR_TXT"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c0448a8" next="0x7f674c0449b8" prev="0x7f674c044798" upper="0x7f674c037240" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c0449b8" next="0x7f674c044ac8" prev="0x7f674c0448a8" upper="0x7f674c037240" lower="(nil)">Prepare for Testing the Design<Text nLength="30" nType="POR_PARA"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c044ac8" next="0x7f674c044bd8" prev="0x7f674c0449b8" upper="0x7f674c037240" lower="(nil)">Modify the tb_svn_seg_out.txt testing to suit the needs of our truth table by navigating to<Special nLength="0" nType="POR_NUMBER" rText="1."/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="63" nType="POR_TXT"/><LineBreak/><Text nLength="28" nType="POR_LAY"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c044bd8" next="0x7f674c044ce8" prev="0x7f674c044ac8" upper="0x7f674c037240" lower="(nil)">View: Implementation<Special nLength="0" nType="POR_BULLET" rText="o"/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="20" nType="POR_TXT"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c044ce8" next="0x7f674c044df8" prev="0x7f674c044bd8" upper="0x7f674c037240" lower="(nil)">Modify the tb_svn_seg_out.txt file to contain all possible input bit combinations.<Special nLength="0" nType="POR_NUMBER" rText="2."/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="69" nType="POR_TXT"/><LineBreak/><Text nLength="13" nType="POR_LAY"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c044df8" next="0x7f674c009030" prev="0x7f674c044ce8" upper="0x7f674c037240" lower="(nil)">Modify the tb_svn_seg_out.txt to contain all expected output bit combinations.<Special nLength="0" nType="POR_NUMBER" rText="3."/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="65" nType="POR_TXT"/><LineBreak/><Text nLength="13" nType="POR_LAY"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c009030" next="0x7f674c009140" prev="0x7f674c044df8" upper="0x7f674c037240" lower="(nil)">Save all files.<Special nLength="0" nType="POR_NUMBER" rText="4."/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="15" nType="POR_TXT"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c009140" next="0x7f674c009250" prev="0x7f674c009030" upper="0x7f674c037240" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c009250" next="0x7f674c009360" prev="0x7f674c009140" upper="0x7f674c037240" lower="(nil)">Test the Design with iSim<Text nLength="25" nType="POR_PARA"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c009360" next="0x7f674c009470" prev="0x7f674c009250" upper="0x7f674c037240" lower="(nil)">Switch to Simulation mode by clicking on <Special nLength="0" nType="POR_NUMBER" rText="1."/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="41" nType="POR_TXT"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c009470" next="0x7f674c009580" prev="0x7f674c009360" upper="0x7f674c037240" lower="(nil)">View:Simulation<Special nLength="0" nType="POR_NUMBER" rText="a."/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="15" nType="POR_TXT"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c009580" next="0x7f674c009690" prev="0x7f674c009470" upper="0x7f674c037240" lower="(nil)">Xc3s500e-4fg320.<Special nLength="0" nType="POR_NUMBER" rText="i."/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="16" nType="POR_TXT"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c009690" next="0x7f674c0097a0" prev="0x7f674c009580" upper="0x7f674c037240" lower="(nil)">Tb_svn_seg_out<Special nLength="0" nType="POR_NUMBER" rText="ii."/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="14" nType="POR_TXT"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c0097a0" next="0x7f674c0098b0" prev="0x7f674c009690" upper="0x7f674c037240" lower="(nil)">Run iSim simulator by clicking on <Special nLength="0" nType="POR_NUMBER" rText="2."/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="34" nType="POR_TXT"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c0098b0" next="0x7f674c0099c0" prev="0x7f674c0097a0" upper="0x7f674c037240" lower="(nil)">iSim Simulator<Special nLength="0" nType="POR_NUMBER" rText="a."/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="14" nType="POR_TXT"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c0099c0" next="0x7f674c009ad0" prev="0x7f674c0098b0" upper="0x7f674c037240" lower="(nil)">Right click Simulate Behavioral Model and then run.<Special nLength="0" nType="POR_NUMBER" rText="b."/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="51" nType="POR_TXT"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c009ad0" next="(nil)" prev="0x7f674c0099c0" upper="0x7f674c037240" lower="(nil)">Once iSim runs, verify that the Mismatch—index messages match what you are expecting in your test bench text file.<Special nLength="0" nType="POR_NUMBER" rText="3."/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="56" nType="POR_TXT"/><LineBreak/><Text nLength="58" nType="POR_LAY"/><LineBreak/><Finish/></txt></body><footer ptr="0x7f674c038240" next="(nil)" prev="0x7f674c037240" upper="0x7f674c0352a0" lower="0x7f674c0439b0"><txt ptr="0x7f674c0439b0" next="(nil)" prev="(nil)" upper="0x7f674c038240" lower="(nil)"><Text nLength="0" nType="POR_PARA"/><LineBreak/><Finish/></txt></footer></page><page ptr="0x7f674c035380" next="0x7f674c035460" prev="0x7f674c0352a0" upper="0x235b5d0" lower="0x7f674c037300"><body ptr="0x7f674c037300" next="0x7f674c038300" prev="(nil)" upper="0x7f674c035380" lower="0x7f674c009be0"><txt ptr="0x7f674c009be0" next="0x7f674c009cf0" prev="(nil)" upper="0x7f674c037300" lower="(nil)">If the results are not what you expect either edit your module code or your test bench code and then attempt to test again.<Special nLength="0" nType="POR_NUMBER" rText="4."/><Text nLength="0" nType="POR_TABLEFT"/><Text nLength="63" nType="POR_TXT"/><LineBreak/><Text nLength="60" nType="POR_LAY"/><LineBreak/><Finish/></txt><txt ptr="0x7f674c009cf0" next="0x7f674c009e00" prev="0x7f674c009be0" upper="0x7f674c037300" lower="(nil)">If the results are what you expected move on to the Compile to .bit file step.<Finish/></txt><txt ptr="0x7f674c009e00" next="0x7f674c00a038" prev="0x7f674c009cf0" upper="0x7f674c037300" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c00a038" next="0x7f674c00a258" prev="0x7f674c009e00" upper="0x7f674c037300" lower="(nil)">Compile to .bit file<Finish/></txt><txt ptr="0x7f674c00a258" next="0x7f674c00a368" prev="0x7f674c00a038" upper="0x7f674c037300" lower="(nil)">Compile to .bit file by navigating to<Finish/></txt><txt ptr="0x7f674c00a368" next="0x7f674c00a478" prev="0x7f674c00a258" upper="0x7f674c037300" lower="(nil)">Implementation<Finish/></txt><txt ptr="0x7f674c00a478" next="0x7f674c00a588" prev="0x7f674c00a368" upper="0x7f674c037300" lower="(nil)">Xc3s500e-4g320<Finish/></txt><txt ptr="0x7f674c00a588" next="0x7f674c00a698" prev="0x7f674c00a478" upper="0x7f674c037300" lower="(nil)">Lab3_top_io_wrapper<Finish/></txt><txt ptr="0x7f674c00a698" next="0x7f674c00a7a8" prev="0x7f674c00a588" upper="0x7f674c037300" lower="(nil)">Implement design<Finish/></txt><txt ptr="0x7f674c00a7a8" next="0x7f674c00a8b8" prev="0x7f674c00a698" upper="0x7f674c037300" lower="(nil)">Generation programming file<Finish/></txt><txt ptr="0x7f674c00a8b8" next="0x7f674c00a9c8" prev="0x7f674c00a7a8" upper="0x7f674c037300" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c00a9c8" next="0x7f674c00aad8" prev="0x7f674c00a8b8" upper="0x7f674c037300" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c00aad8" next="0x7f674c00abe8" prev="0x7f674c00a9c8" upper="0x7f674c037300" lower="(nil)">Transfer .bit file to Board<Finish/></txt><txt ptr="0x7f674c00abe8" next="0x7f674c00acf8" prev="0x7f674c00aad8" upper="0x7f674c037300" lower="(nil)">Use your favorite network transfer program to move the .bit file from the development server to your local workstation.<Finish/></txt><txt ptr="0x7f674c00acf8" next="0x7f674c00ae08" prev="0x7f674c00abe8" upper="0x7f674c037300" lower="(nil)">Plug the board into USB port.<Finish/></txt><txt ptr="0x7f674c00ae08" next="0x7f674c00b040" prev="0x7f674c00acf8" upper="0x7f674c037300" lower="(nil)">Launch the Digilent Adept application on your local workstation.<Finish/></txt><txt ptr="0x7f674c00b040" next="0x7f674c00b150" prev="0x7f674c00ae08" upper="0x7f674c037300" lower="(nil)">Click the config tab.<Finish/></txt><txt ptr="0x7f674c00b150" next="0x7f674c00b260" prev="0x7f674c00b040" upper="0x7f674c037300" lower="(nil)">Click on browse by the PROM icon.<Finish/></txt><txt ptr="0x7f674c00b260" next="0x7f674c00b370" prev="0x7f674c00b150" upper="0x7f674c037300" lower="(nil)">Select your transferred .bit file.<Finish/></txt><txt ptr="0x7f674c00b370" next="0x7f674c00b480" prev="0x7f674c00b260" upper="0x7f674c037300" lower="(nil)">Click program.<Finish/></txt><txt ptr="0x7f674c00b480" next="0x7f674c00b590" prev="0x7f674c00b370" upper="0x7f674c037300" lower="(nil)">Once complete press the reset button on the board.<Finish/></txt><txt ptr="0x7f674c00b590" next="0x7f674c00b6a0" prev="0x7f674c00b480" upper="0x7f674c037300" lower="(nil)">Test your outcome physically on the board to make sure that it matches expectations.<Finish/></txt><txt ptr="0x7f674c00b6a0" next="0x7f674c00b7b0" prev="0x7f674c00b590" upper="0x7f674c037300" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c00b7b0" next="0x7f674c00b8c0" prev="0x7f674c00b6a0" upper="0x7f674c037300" lower="(nil)">Results:<Finish/></txt><txt ptr="0x7f674c00b8c0" next="(nil)" prev="0x7f674c00b7b0" upper="0x7f674c037300" lower="(nil)">Below you will find the truth table and equation representing our seven segment display.  The results on the physical board matched what was expected from the truth table.*<Finish/></txt></body><footer ptr="0x7f674c038300" next="(nil)" prev="0x7f674c037300" upper="0x7f674c035380" lower="0x7f674c00a148"><txt ptr="0x7f674c00a148" next="(nil)" prev="(nil)" upper="0x7f674c038300" lower="(nil)"><Finish/></txt></footer></page><page ptr="0x7f674c035460" next="0x7f674c035540" prev="0x7f674c035380" upper="0x235b5d0" lower="0x7f674c0373c0"><body ptr="0x7f674c0373c0" next="0x7f674c0383c0" prev="(nil)" upper="0x7f674c035460" lower="0x7f674c00b9d0"><txt ptr="0x7f674c00b9d0" next="0x7f674c00bae0" prev="(nil)" upper="0x7f674c0373c0" lower="(nil)"><anchored><fly ptr="0x235c050" next="(nil)" prev="(nil)" upper="(nil)" lower="0x23a5890"><txt ptr="0x23a5890" next="(nil)" prev="(nil)" upper="0x235c050" lower="(nil)"/></fly></anchored>Figure 4: Truth Table*<Finish/></txt><txt ptr="0x7f674c00bae0" next="0x7f674c00bd00" prev="0x7f674c00b9d0" upper="0x7f674c0373c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c00bd00" next="0x7f674c00be10" prev="0x7f674c00bae0" upper="0x7f674c0373c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c00be10" next="0x7f674c00c048" prev="0x7f674c00bd00" upper="0x7f674c0373c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c00c048" next="0x7f674c00c158" prev="0x7f674c00be10" upper="0x7f674c0373c0" lower="(nil)">Create Equation that Satisfies the Truth Table:*Each bit of the seg_out bus will need its own equation utilizing an AND statement and then a sum of products. Each of these equations will have to be determined based on what is in the truth table and then converted to Verilog code. The Verilog code can be found in the source code section of this lab report.<Finish/></txt><txt ptr="0x7f674c00c158" next="0x7f674c00c268" prev="0x7f674c00c048" upper="0x7f674c0373c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c00c268" next="0x7f674c00c378" prev="0x7f674c00c158" upper="0x7f674c0373c0" lower="(nil)">Below are the equations that we will use to control each of the segments in the seven segment display. When these are equal to ‘1’ the board will then light up that particular segment. The combination of these will form the number we request with our bcd_in switches.<Finish/></txt><txt ptr="0x7f674c00c378" next="0x7f674c00c488" prev="0x7f674c00c268" upper="0x7f674c0373c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c00c488" next="0x7f674c00c598" prev="0x7f674c00c378" upper="0x7f674c0373c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c00c598" next="0x7f674c00c6a8" prev="0x7f674c00c488" upper="0x7f674c0373c0" lower="(nil)">Figure 5: Verilog Equations<Finish/></txt><txt ptr="0x7f674c00c6a8" next="0x7f674c00c7b8" prev="0x7f674c00c598" upper="0x7f674c0373c0" lower="(nil)">Seg_out[6] = <Finish/></txt><txt ptr="0x7f674c00c7b8" next="0x7f674c00c8c8" prev="0x7f674c00c6a8" upper="0x7f674c0373c0" lower="(nil)">(Display_On) <Finish/></txt><txt ptr="0x7f674c00c8c8" next="(nil)" prev="0x7f674c00c7b8" upper="0x7f674c0373c0" lower="(nil)">(<Finish/></txt></body><footer ptr="0x7f674c0383c0" next="(nil)" prev="0x7f674c0373c0" upper="0x7f674c035460" lower="0x7f674c00bbf0"><txt ptr="0x7f674c00bbf0" next="(nil)" prev="(nil)" upper="0x7f674c0383c0" lower="(nil)"><Finish/></txt></footer></page><page ptr="0x7f674c035540" next="0x7f674c035620" prev="0x7f674c035460" upper="0x235b5d0" lower="0x7f674c037480"><body ptr="0x7f674c037480" next="0x7f674c038480" prev="(nil)" upper="0x7f674c035540" lower="0x7f674c00c9d8"><txt ptr="0x7f674c00c9d8" next="0x7f674c00cae8" prev="(nil)" upper="0x7f674c037480" lower="(nil)">(bcd_in[3]’ bcd_in[2]’ bcd_in[1] bcd_in[0]’) +<Finish/></txt><txt ptr="0x7f674c00cae8" next="0x7f674c00cbf8" prev="0x7f674c00c9d8" upper="0x7f674c037480" lower="(nil)">* (bcd_in[3]’  bcd_in[2]’  bcd_in[1] bcd_in[0]) +<Finish/></txt><txt ptr="0x7f674c00cbf8" next="0x7f674c00cd08" prev="0x7f674c00cae8" upper="0x7f674c037480" lower="(nil)">* (bcd_in[3]`  bcd_in[2]` bcd_in[1]` bcd_in[0]`) +<Finish/></txt><txt ptr="0x7f674c00cd08" next="0x7f674c00ce18" prev="0x7f674c00cbf8" upper="0x7f674c037480" lower="(nil)">* (bcd_in[3]`  bcd_in[2]  bcd_in[1]` bcd_in[0]) +<Finish/></txt><txt ptr="0x7f674c00ce18" next="0x7f674c00d050" prev="0x7f674c00cd08" upper="0x7f674c037480" lower="(nil)">* (bcd_in[3]`  bcd_in[2]  bcd_in[1]  bcd_in[0]`) +<Finish/></txt><txt ptr="0x7f674c00d050" next="0x7f674c00d160" prev="0x7f674c00ce18" upper="0x7f674c037480" lower="(nil)">* (bcd_in[3]   bcd_in[2]` bcd_in[1]` bcd_in[0]`) +<Finish/></txt><txt ptr="0x7f674c00d160" next="0x7f674c00d270" prev="0x7f674c00d050" upper="0x7f674c037480" lower="(nil)">* (bcd_in[3]   bcd_in[2]` bcd_in[1]` bcd_in[0]) <Finish/></txt><txt ptr="0x7f674c00d270" next="0x7f674c00d380" prev="0x7f674c00d160" upper="0x7f674c037480" lower="(nil)">)<Finish/></txt><txt ptr="0x7f674c00d380" next="0x7f674c00d490" prev="0x7f674c00d270" upper="0x7f674c037480" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c00d490" next="0x7f674c00d5a0" prev="0x7f674c00d380" upper="0x7f674c037480" lower="(nil)">seg_out[5] = <Finish/></txt><txt ptr="0x7f674c00d5a0" next="0x7f674c00d6b0" prev="0x7f674c00d490" upper="0x7f674c037480" lower="(nil)">*<Finish/></txt><txt ptr="0x7f674c00d6b0" next="0x7f674c00d7c0" prev="0x7f674c00d5a0" upper="0x7f674c037480" lower="(nil)">*(display_on) <Finish/></txt><txt ptr="0x7f674c00d7c0" next="0x7f674c00d8d0" prev="0x7f674c00d6b0" upper="0x7f674c037480" lower="(nil)">*(<Finish/></txt><txt ptr="0x7f674c00d8d0" next="0x7f674c00d9e0" prev="0x7f674c00d7c0" upper="0x7f674c037480" lower="(nil)">*(bcd_in[3]’  bcd_in[2]’  bcd_in[1]’   bcd_in[0]’) +<Finish/></txt><txt ptr="0x7f674c00d9e0" next="0x7f674c00daf0" prev="0x7f674c00d8d0" upper="0x7f674c037480" lower="(nil)">*(bcd_in[3]’  bcd_in[2]’  bcd_in[1]’    bcd_in[0]) +<Finish/></txt><txt ptr="0x7f674c00daf0" next="0x7f674c00dc00" prev="0x7f674c00d9e0" upper="0x7f674c037480" lower="(nil)">*(bcd_in[3]’  bcd_in[2]’   bcd_in[1]    bcd_in[0]) +<Finish/></txt><txt ptr="0x7f674c00dc00" next="0x7f674c00dd10" prev="0x7f674c00daf0" upper="0x7f674c037480" lower="(nil)">*(bcd_in[3]’   bcd_in[2]  bcd_in[1]’   bcd_in[0]’) +<Finish/></txt><txt ptr="0x7f674c00dd10" next="0x7f674c00de20" prev="0x7f674c00dc00" upper="0x7f674c037480" lower="(nil)">*(bcd_in[3]’   bcd_in[2]  bcd_in[1]’    bcd_in[0]) +<Finish/></txt><txt ptr="0x7f674c00de20" next="0x7f674c00e058" prev="0x7f674c00dd10" upper="0x7f674c037480" lower="(nil)">*(bcd_in[3]’   bcd_in[2]   bcd_in[1]   bcd_in[0]’) +<Finish/></txt><txt ptr="0x7f674c00e058" next="0x7f674c00e168" prev="0x7f674c00de20" upper="0x7f674c037480" lower="(nil)">*(bcd_in[3]’   bcd_in[2]   bcd_in[1]    bcd_in[0]) +<Finish/></txt><txt ptr="0x7f674c00e168" next="0x7f674c00e278" prev="0x7f674c00e058" upper="0x7f674c037480" lower="(nil)">*(bcd_in[3]  bcd_in[2]’  bcd_in[1]‘  bcd_in[0]’) +<Finish/></txt><txt ptr="0x7f674c00e278" next="0x7f674c00e388" prev="0x7f674c00e168" upper="0x7f674c037480" lower="(nil)">*(bcd_in[3]  bcd_in[2]’  bcd_in[1]’    bcd_in[0]) <Finish/></txt><txt ptr="0x7f674c00e388" next="0x7f674c00e498" prev="0x7f674c00e278" upper="0x7f674c037480" lower="(nil)">)<Finish/></txt><txt ptr="0x7f674c00e498" next="0x7f674c00e5a8" prev="0x7f674c00e388" upper="0x7f674c037480" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c00e5a8" next="0x7f674c00e7c8" prev="0x7f674c00e498" upper="0x7f674c037480" lower="(nil)"> seg_out[4] =<Finish/></txt><txt ptr="0x7f674c00e7c8" next="0x7f674c00e8d8" prev="0x7f674c00e5a8" upper="0x7f674c037480" lower="(nil)">*(display_on) <Finish/></txt><txt ptr="0x7f674c00e8d8" next="0x7f674c00e9e8" prev="0x7f674c00e7c8" upper="0x7f674c037480" lower="(nil)">*(<Finish/></txt><txt ptr="0x7f674c00e9e8" next="0x7f674c00eaf8" prev="0x7f674c00e8d8" upper="0x7f674c037480" lower="(nil)">*(bcd_in[3]’  bcd_in[2]’   bcd_in[1]’   bcd_in[0]’) +<Finish/></txt><txt ptr="0x7f674c00eaf8" next="0x7f674c00ec08" prev="0x7f674c00e9e8" upper="0x7f674c037480" lower="(nil)">*(bcd_in[3]’  bcd_in[2]’   bcd_in[1]’    bcd_in[0]) +<Finish/></txt><txt ptr="0x7f674c00ec08" next="0x7f674c00ed18" prev="0x7f674c00eaf8" upper="0x7f674c037480" lower="(nil)">*(bcd_in[3]’  bcd_in[2]’    bcd_in[1]   bcd_in[0]’) +<Finish/></txt><txt ptr="0x7f674c00ed18" next="0x7f674c00ee28" prev="0x7f674c00ec08" upper="0x7f674c037480" lower="(nil)">*(bcd_in[3]’  bcd_in[2]’    bcd_in[1]    bcd_in[0]) +<Finish/></txt><txt ptr="0x7f674c00ee28" next="0x7f674c00f060" prev="0x7f674c00ed18" upper="0x7f674c037480" lower="(nil)">*(bcd_in[3]’   bcd_in[2]   bcd_in[1]’   bcd_in[0]’) +<Finish/></txt><txt ptr="0x7f674c00f060" next="0x7f674c00f170" prev="0x7f674c00ee28" upper="0x7f674c037480" lower="(nil)">*(bcd_in[3]’   bcd_in[2]    bcd_in[1]    bcd_in[0]) +<Finish/></txt><txt ptr="0x7f674c00f170" next="0x7f674c00f280" prev="0x7f674c00f060" upper="0x7f674c037480" lower="(nil)">*(bcd_in[3]  bcd_in[2]’   bcd_in[1]’   bcd_in[0]’) +<Finish/></txt><txt ptr="0x7f674c00f280" next="0x7f674c00f390" prev="0x7f674c00f170" upper="0x7f674c037480" lower="(nil)">*(bcd_in[3]  bcd_in[2]’   bcd_in[1]’    bcd_in[0]) <Finish/></txt><txt ptr="0x7f674c00f390" next="0x7f674c00f4a0" prev="0x7f674c00f280" upper="0x7f674c037480" lower="(nil)">)<Finish/></txt><txt ptr="0x7f674c00f4a0" next="0x7f674c00f5b0" prev="0x7f674c00f390" upper="0x7f674c037480" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c00f5b0" next="0x7f674c00f6c0" prev="0x7f674c00f4a0" upper="0x7f674c037480" lower="(nil)"> seg_out[3] =<Finish/></txt><txt ptr="0x7f674c00f6c0" next="0x7f674c00f7d0" prev="0x7f674c00f5b0" upper="0x7f674c037480" lower="(nil)">*(display_on) <Finish/></txt><txt ptr="0x7f674c00f7d0" next="0x7f674c00f8e0" prev="0x7f674c00f6c0" upper="0x7f674c037480" lower="(nil)">*(<Finish/></txt><txt ptr="0x7f674c00f8e0" next="0x7f674c00f9f0" prev="0x7f674c00f7d0" upper="0x7f674c037480" lower="(nil)">*(bcd_in[3]’  bcd_in[2]’   bcd_in[1]’   bcd_in[0]’) +<Finish/></txt><txt ptr="0x7f674c00f9f0" next="0x7f674c00fb00" prev="0x7f674c00f8e0" upper="0x7f674c037480" lower="(nil)">*(bcd_in[3]’  bcd_in[2]’    bcd_in[1]   bcd_in[0]’) +<Finish/></txt><txt ptr="0x7f674c00fb00" next="0x7f674c00fc10" prev="0x7f674c00f9f0" upper="0x7f674c037480" lower="(nil)">*(bcd_in[3]’  bcd_in[2]’    bcd_in[1]    bcd_in[0]) +<Finish/></txt><txt ptr="0x7f674c00fc10" next="(nil)" prev="0x7f674c00fb00" upper="0x7f674c037480" lower="(nil)">*(bcd_in[3]’   bcd_in[2]   bcd_in[1]’    bcd_in[0]) +<Finish/></txt></body><footer ptr="0x7f674c038480" next="(nil)" prev="0x7f674c037480" upper="0x7f674c035540" lower="0x7f674c00e6b8"><txt ptr="0x7f674c00e6b8" next="(nil)" prev="(nil)" upper="0x7f674c038480" lower="(nil)"><Finish/></txt></footer></page><page ptr="0x7f674c035620" next="0x7f674c035700" prev="0x7f674c035540" upper="0x235b5d0" lower="0x7f674c037540"><body ptr="0x7f674c037540" next="0x7f674c038540" prev="(nil)" upper="0x7f674c035620" lower="0x7f674c00fd20"><txt ptr="0x7f674c00fd20" next="0x7f674c00fe30" prev="(nil)" upper="0x7f674c037540" lower="(nil)">*(bcd_in[3]’   bcd_in[2]    bcd_in[1]   bcd_in[0]’) +<Finish/></txt><txt ptr="0x7f674c00fe30" next="0x7f674c010068" prev="0x7f674c00fd20" upper="0x7f674c037540" lower="(nil)">*(bcd_in[3]’   bcd_in[2]    bcd_in[1]    bcd_in[0]) +<Finish/></txt><txt ptr="0x7f674c010068" next="0x7f674c010178" prev="0x7f674c00fe30" upper="0x7f674c037540" lower="(nil)">*(bcd_in[3]  bcd_in[2]’   bcd_in[1]’   bcd_in[0]’) +<Finish/></txt><txt ptr="0x7f674c010178" next="0x7f674c010288" prev="0x7f674c010068" upper="0x7f674c037540" lower="(nil)">*(bcd_in[3]  bcd_in[2]’   bcd_in[1]’    bcd_in[0]) <Finish/></txt><txt ptr="0x7f674c010288" next="0x7f674c010398" prev="0x7f674c010178" upper="0x7f674c037540" lower="(nil)">*)<Finish/></txt><txt ptr="0x7f674c010398" next="0x7f674c0104a8" prev="0x7f674c010288" upper="0x7f674c037540" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c0104a8" next="0x7f674c0105b8" prev="0x7f674c010398" upper="0x7f674c037540" lower="(nil)"> seg_out[2] =<Finish/></txt><txt ptr="0x7f674c0105b8" next="0x7f674c0106c8" prev="0x7f674c0104a8" upper="0x7f674c037540" lower="(nil)">*(display_on) <Finish/></txt><txt ptr="0x7f674c0106c8" next="0x7f674c0107d8" prev="0x7f674c0105b8" upper="0x7f674c037540" lower="(nil)">*(<Finish/></txt><txt ptr="0x7f674c0107d8" next="0x7f674c0108e8" prev="0x7f674c0106c8" upper="0x7f674c037540" lower="(nil)">*(bcd_in[3]’  bcd_in[2]’   bcd_in[1]’   bcd_in[0]’) +<Finish/></txt><txt ptr="0x7f674c0108e8" next="0x7f674c0109f8" prev="0x7f674c0107d8" upper="0x7f674c037540" lower="(nil)">*(bcd_in[3]’   bcd_in[2]   bcd_in[1]’   bcd_in[0]’) +<Finish/></txt><txt ptr="0x7f674c0109f8" next="0x7f674c010b08" prev="0x7f674c0108e8" upper="0x7f674c037540" lower="(nil)">*(bcd_in[3]’   bcd_in[2]   bcd_in[1]’    bcd_in[0]) +<Finish/></txt><txt ptr="0x7f674c010b08" next="0x7f674c010c18" prev="0x7f674c0109f8" upper="0x7f674c037540" lower="(nil)">*(bcd_in[3]’   bcd_in[2]    bcd_in[1]   bcd_in[0]’) +<Finish/></txt><txt ptr="0x7f674c010c18" next="0x7f674c010d28" prev="0x7f674c010b08" upper="0x7f674c037540" lower="(nil)">*(bcd_in[3]  bcd_in[2]’   bcd_in[1]’   bcd_in[0]’) +<Finish/></txt><txt ptr="0x7f674c010d28" next="0x7f674c010e38" prev="0x7f674c010c18" upper="0x7f674c037540" lower="(nil)">*(bcd_in[3]  bcd_in[2]’   bcd_in[1]’    bcd_in[0]) <Finish/></txt><txt ptr="0x7f674c010e38" next="0x7f674c011070" prev="0x7f674c010d28" upper="0x7f674c037540" lower="(nil)">*)<Finish/></txt><txt ptr="0x7f674c011070" next="0x7f674c011180" prev="0x7f674c010e38" upper="0x7f674c037540" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c011180" next="0x7f674c011290" prev="0x7f674c011070" upper="0x7f674c037540" lower="(nil)"> seg_out[1] = <Finish/></txt><txt ptr="0x7f674c011290" next="0x7f674c0113a0" prev="0x7f674c011180" upper="0x7f674c037540" lower="(nil)">*(display_on) <Finish/></txt><txt ptr="0x7f674c0113a0" next="0x7f674c0114b0" prev="0x7f674c011290" upper="0x7f674c037540" lower="(nil)">*(<Finish/></txt><txt ptr="0x7f674c0114b0" next="0x7f674c0115c0" prev="0x7f674c0113a0" upper="0x7f674c037540" lower="(nil)">*(bcd_in[3]’  bcd_in[2]’   bcd_in[1]’   bcd_in[0]’) +<Finish/></txt><txt ptr="0x7f674c0115c0" next="0x7f674c0116d0" prev="0x7f674c0114b0" upper="0x7f674c037540" lower="(nil)">*(bcd_in[3]’  bcd_in[2]’    bcd_in[1]   bcd_in[0]’) +<Finish/></txt><txt ptr="0x7f674c0116d0" next="0x7f674c0117e0" prev="0x7f674c0115c0" upper="0x7f674c037540" lower="(nil)">*(bcd_in[3]’   bcd_in[2]    bcd_in[1]   bcd_in[0]’) +<Finish/></txt><txt ptr="0x7f674c0117e0" next="0x7f674c0118f0" prev="0x7f674c0116d0" upper="0x7f674c037540" lower="(nil)">*(bcd_in[3]  bcd_in[2]’   bcd_in[1]’   bcd_in[0]’) <Finish/></txt><txt ptr="0x7f674c0118f0" next="0x7f674c011b10" prev="0x7f674c0117e0" upper="0x7f674c037540" lower="(nil)">*)<Finish/></txt><txt ptr="0x7f674c011b10" next="0x7f674c011c20" prev="0x7f674c0118f0" upper="0x7f674c037540" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c011c20" next="0x7f674c011d30" prev="0x7f674c011b10" upper="0x7f674c037540" lower="(nil)"> seg_out[0] =<Finish/></txt><txt ptr="0x7f674c011d30" next="0x7f674c011e40" prev="0x7f674c011c20" upper="0x7f674c037540" lower="(nil)">*(display_on) <Finish/></txt><txt ptr="0x7f674c011e40" next="0x7f674c012078" prev="0x7f674c011d30" upper="0x7f674c037540" lower="(nil)">*(<Finish/></txt><txt ptr="0x7f674c012078" next="0x7f674c012188" prev="0x7f674c011e40" upper="0x7f674c037540" lower="(nil)">*(bcd_in[3]’  bcd_in[2]’   bcd_in[1]’   bcd_in[0]’) +<Finish/></txt><txt ptr="0x7f674c012188" next="0x7f674c012298" prev="0x7f674c012078" upper="0x7f674c037540" lower="(nil)">*(bcd_in[3]’  bcd_in[2]’    bcd_in[1]   bcd_in[0]’) +<Finish/></txt><txt ptr="0x7f674c012298" next="0x7f674c0123a8" prev="0x7f674c012188" upper="0x7f674c037540" lower="(nil)">*(bcd_in[3]’  bcd_in[2]’    bcd_in[1]    bcd_in[0]) +<Finish/></txt><txt ptr="0x7f674c0123a8" next="0x7f674c0124b8" prev="0x7f674c012298" upper="0x7f674c037540" lower="(nil)">*(bcd_in[3]’   bcd_in[2]   bcd_in[1]’    bcd_in[0]) +<Finish/></txt><txt ptr="0x7f674c0124b8" next="0x7f674c0125c8" prev="0x7f674c0123a8" upper="0x7f674c037540" lower="(nil)">*(bcd_in[3]’   bcd_in[2]    bcd_in[1]   bcd_in[0]’) +<Finish/></txt><txt ptr="0x7f674c0125c8" next="0x7f674c0126d8" prev="0x7f674c0124b8" upper="0x7f674c037540" lower="(nil)">*(bcd_in[3]  bcd_in[2]’   bcd_in[1]’   bcd_in[0]’) +<Finish/></txt><txt ptr="0x7f674c0126d8" next="0x7f674c0127e8" prev="0x7f674c0125c8" upper="0x7f674c037540" lower="(nil)">*(bcd_in[3]  bcd_in[2]’   bcd_in[1]’    bcd_in[0]) <Finish/></txt><txt ptr="0x7f674c0127e8" next="0x7f674c0128f8" prev="0x7f674c0126d8" upper="0x7f674c037540" lower="(nil)">*)<Finish/></txt><txt ptr="0x7f674c0128f8" next="0x7f674c012a08" prev="0x7f674c0127e8" upper="0x7f674c037540" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c012a08" next="0x7f674c012b18" prev="0x7f674c0128f8" upper="0x7f674c037540" lower="(nil)">Discussion:<Finish/></txt><txt ptr="0x7f674c012b18" next="0x7f674c012c28" prev="0x7f674c012a08" upper="0x7f674c037540" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c012c28" next="(nil)" prev="0x7f674c012b18" upper="0x7f674c037540" lower="(nil)">This was a good step up from the previous lab. I feel that this lab gave me a better feel for how things are connected together in this language. Also, it gave me experience in a slightly more complex system design. <Finish/></txt></body><footer ptr="0x7f674c038540" next="(nil)" prev="0x7f674c037540" upper="0x7f674c035620" lower="0x7f674c011a00"><txt ptr="0x7f674c011a00" next="(nil)" prev="(nil)" upper="0x7f674c038540" lower="(nil)"><Finish/></txt></footer></page><page ptr="0x7f674c035700" next="0x7f674c0357e0" prev="0x7f674c035620" upper="0x235b5d0" lower="0x7f674c037600"><body ptr="0x7f674c037600" next="0x7f674c038600" prev="(nil)" upper="0x7f674c035700" lower="0x7f674c012d38"><txt ptr="0x7f674c012d38" next="0x7f674c012e48" prev="(nil)" upper="0x7f674c037600" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c012e48" next="0x7f674c013080" prev="0x7f674c012d38" upper="0x7f674c037600" lower="(nil)">In particular the experience has cemented in my mind how all of this runs in parallel. It did not matter what order any of my assign statements were in because they are essentially all acted on at the identical time within which would be controlled by a clock setting within the chip.<Finish/></txt><txt ptr="0x7f674c013080" next="0x7f674c013190" prev="0x7f674c012e48" upper="0x7f674c037600" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c013190" next="0x7f674c0132a0" prev="0x7f674c013080" upper="0x7f674c037600" lower="(nil)">Initially I had problems getting the lights to work properly. I now know that this was because I was being lazy. I should have not tried to implement a design before its test bed module is complete. What I thought would be easy to test manually turned into quite a lot of labor until I utilized the test bed. In the future I will always do the test bed first.<Finish/></txt><txt ptr="0x7f674c0132a0" next="0x7f674c0133b0" prev="0x7f674c013190" upper="0x7f674c037600" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c0133b0" next="0x7f674c0134c0" prev="0x7f674c0132a0" upper="0x7f674c037600" lower="(nil)">The svn_seg_module could have been designed in a few different ways. One of those was to assign a wire instance to a name, for example 'p#' and then assign that each particular combination of bcd_in. This would have saved me some typing and saved me the effort of having huge blocks of verilog code.<Finish/></txt><txt ptr="0x7f674c0134c0" next="0x7f674c0135d0" prev="0x7f674c0133b0" upper="0x7f674c037600" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c0135d0" next="0x7f674c0136e0" prev="0x7f674c0134c0" upper="0x7f674c037600" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c0136e0" next="0x7f674c0137f0" prev="0x7f674c0135d0" upper="0x7f674c037600" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c0137f0" next="0x7f674c013900" prev="0x7f674c0136e0" upper="0x7f674c037600" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c013900" next="0x7f674c013a10" prev="0x7f674c0137f0" upper="0x7f674c037600" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c013a10" next="0x7f674c013b20" prev="0x7f674c013900" upper="0x7f674c037600" lower="(nil)">Source Code:<Finish/></txt><txt ptr="0x7f674c013b20" next="0x7f674c013c30" prev="0x7f674c013a10" upper="0x7f674c037600" lower="(nil)">Please see attached documents.<Finish/></txt><txt ptr="0x7f674c013c30" next="0x7f674c013d40" prev="0x7f674c013b20" upper="0x7f674c037600" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c013d40" next="0x7f674c013e50" prev="0x7f674c013c30" upper="0x7f674c037600" lower="(nil)">SVN_SEG_DECODER.V module code<Finish/></txt><txt ptr="0x7f674c013e50" next="0x7f674c014198" prev="0x7f674c013d40" upper="0x7f674c037600" lower="(nil)">`timescale 1ns / 1ps<Finish/></txt><txt ptr="0x7f674c014198" next="0x7f674c0142a8" prev="0x7f674c013e50" upper="0x7f674c037600" lower="(nil)">//////////////////////////////////////////////////////////////////////////////////<Finish/></txt><txt ptr="0x7f674c0142a8" next="0x7f674c0143b8" prev="0x7f674c014198" upper="0x7f674c037600" lower="(nil)">// Company: Vinceco<Finish/></txt><txt ptr="0x7f674c0143b8" next="0x7f674c0144c8" prev="0x7f674c0142a8" upper="0x7f674c037600" lower="(nil)">// Engineer: Vincent Martin<Finish/></txt><txt ptr="0x7f674c0144c8" next="0x7f674c0145d8" prev="0x7f674c0143b8" upper="0x7f674c037600" lower="(nil)">// <Finish/></txt><txt ptr="0x7f674c0145d8" next="0x7f674c0146e8" prev="0x7f674c0144c8" upper="0x7f674c037600" lower="(nil)">// Create Date:    18:16:21 09/11/2012 <Finish/></txt><txt ptr="0x7f674c0146e8" next="0x7f674c0147f8" prev="0x7f674c0145d8" upper="0x7f674c037600" lower="(nil)">// Design Name: * seven segment decoder module<Finish/></txt><txt ptr="0x7f674c0147f8" next="0x7f674c014908" prev="0x7f674c0146e8" upper="0x7f674c037600" lower="(nil)">// Module Name:    svn_seg_decoder <Finish/></txt><txt ptr="0x7f674c014908" next="0x7f674c014a18" prev="0x7f674c0147f8" upper="0x7f674c037600" lower="(nil)">// Project Name:   lab 03 seven segment decoder<Finish/></txt><txt ptr="0x7f674c014a18" next="0x7f674c014b28" prev="0x7f674c014908" upper="0x7f674c037600" lower="(nil)">// Target Devices:  xilinx board<Finish/></txt><txt ptr="0x7f674c014b28" next="0x7f674c014c38" prev="0x7f674c014a18" upper="0x7f674c037600" lower="(nil)">// Tool versions: <Finish/></txt><txt ptr="0x7f674c014c38" next="0x7f674c014d48" prev="0x7f674c014b28" upper="0x7f674c037600" lower="(nil)">// Description: Take in 4 bits as a descriptor of the number you want to show and also<Finish/></txt><txt ptr="0x7f674c014d48" next="0x7f674c014e58" prev="0x7f674c014c38" upper="0x7f674c037600" lower="(nil)">// 1bit as an on/off switch and then output the appropriate signal to drive<Finish/></txt><txt ptr="0x7f674c014e58" next="(nil)" prev="0x7f674c014d48" upper="0x7f674c037600" lower="(nil)">// the seven segment display.<Finish/></txt></body><footer ptr="0x7f674c038600" next="(nil)" prev="0x7f674c037600" upper="0x7f674c035700" lower="0x7f674c014088"><txt ptr="0x7f674c014088" next="(nil)" prev="(nil)" upper="0x7f674c038600" lower="(nil)"><Finish/></txt></footer></page><page ptr="0x7f674c0357e0" next="0x7f674c0358c0" prev="0x7f674c035700" upper="0x235b5d0" lower="0x7f674c0376c0"><body ptr="0x7f674c0376c0" next="0x7f674c0386c0" prev="(nil)" upper="0x7f674c0357e0" lower="0x7f674c015090"><txt ptr="0x7f674c015090" next="0x7f674c0151a0" prev="(nil)" upper="0x7f674c0376c0" lower="(nil)">//<Finish/></txt><txt ptr="0x7f674c0151a0" next="0x7f674c0152b0" prev="0x7f674c015090" upper="0x7f674c0376c0" lower="(nil)">// Dependencies: <Finish/></txt><txt ptr="0x7f674c0152b0" next="0x7f674c0153c0" prev="0x7f674c0151a0" upper="0x7f674c0376c0" lower="(nil)">//<Finish/></txt><txt ptr="0x7f674c0153c0" next="0x7f674c0154d0" prev="0x7f674c0152b0" upper="0x7f674c0376c0" lower="(nil)">// Revision: <Finish/></txt><txt ptr="0x7f674c0154d0" next="0x7f674c0155e0" prev="0x7f674c0153c0" upper="0x7f674c0376c0" lower="(nil)">// Revision 0.01 - File Created<Finish/></txt><txt ptr="0x7f674c0155e0" next="0x7f674c0156f0" prev="0x7f674c0154d0" upper="0x7f674c0376c0" lower="(nil)">// Additional Comments: <Finish/></txt><txt ptr="0x7f674c0156f0" next="0x7f674c015800" prev="0x7f674c0155e0" upper="0x7f674c0376c0" lower="(nil)">//<Finish/></txt><txt ptr="0x7f674c015800" next="0x7f674c015910" prev="0x7f674c0156f0" upper="0x7f674c0376c0" lower="(nil)">//////////////////////////////////////////////////////////////////////////////////<Finish/></txt><txt ptr="0x7f674c015910" next="0x7f674c015a20" prev="0x7f674c015800" upper="0x7f674c0376c0" lower="(nil)">module svn_seg_decoder(<Finish/></txt><txt ptr="0x7f674c015a20" next="0x7f674c015b30" prev="0x7f674c015910" upper="0x7f674c0376c0" lower="(nil)">    input [3:0] bcd_in,<Finish/></txt><txt ptr="0x7f674c015b30" next="0x7f674c015c40" prev="0x7f674c015a20" upper="0x7f674c0376c0" lower="(nil)">    input display_on,<Finish/></txt><txt ptr="0x7f674c015c40" next="0x7f674c015d50" prev="0x7f674c015b30" upper="0x7f674c0376c0" lower="(nil)">    output [6:0] seg_out<Finish/></txt><txt ptr="0x7f674c015d50" next="0x7f674c015e60" prev="0x7f674c015c40" upper="0x7f674c0376c0" lower="(nil)">    );<Finish/></txt><txt ptr="0x7f674c015e60" next="0x7f674c016098" prev="0x7f674c015d50" upper="0x7f674c0376c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c016098" next="0x7f674c0161a8" prev="0x7f674c015e60" upper="0x7f674c0376c0" lower="(nil)">/*<Finish/></txt><txt ptr="0x7f674c0161a8" next="0x7f674c0162b8" prev="0x7f674c016098" upper="0x7f674c0376c0" lower="(nil)">___Note about how this was done___<Finish/></txt><txt ptr="0x7f674c0162b8" next="0x7f674c0163c8" prev="0x7f674c0161a8" upper="0x7f674c0376c0" lower="(nil)">I think that it might have been easier to create a variable for each<Finish/></txt><txt ptr="0x7f674c0163c8" next="0x7f674c0164d8" prev="0x7f674c0162b8" upper="0x7f674c0376c0" lower="(nil)">particular combination possibility of our bcd_in[3] through bcd_in[0]<Finish/></txt><txt ptr="0x7f674c0164d8" next="0x7f674c0165e8" prev="0x7f674c0163c8" upper="0x7f674c0376c0" lower="(nil)">and do the logic that way. So that I could make all of my crazy<Finish/></txt><txt ptr="0x7f674c0165e8" next="0x7f674c0166f8" prev="0x7f674c0164d8" upper="0x7f674c0376c0" lower="(nil)">assign seg_out[#] logic blocks smaller. <Finish/></txt><txt ptr="0x7f674c0166f8" next="0x7f674c016808" prev="0x7f674c0165e8" upper="0x7f674c0376c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c016808" next="0x7f674c016918" prev="0x7f674c0166f8" upper="0x7f674c0376c0" lower="(nil)">This would have made it a little more easy to read I think, however,<Finish/></txt><txt ptr="0x7f674c016918" next="0x7f674c016a28" prev="0x7f674c016808" upper="0x7f674c0376c0" lower="(nil)">this way works just as well. But it can be kind of confusing to read and <Finish/></txt><txt ptr="0x7f674c016a28" next="0x7f674c016b38" prev="0x7f674c016918" upper="0x7f674c0376c0" lower="(nil)">error prone to type.<Finish/></txt><txt ptr="0x7f674c016b38" next="0x7f674c016c48" prev="0x7f674c016a28" upper="0x7f674c0376c0" lower="(nil)">*/<Finish/></txt><txt ptr="0x7f674c016c48" next="0x7f674c016d58" prev="0x7f674c016b38" upper="0x7f674c0376c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c016d58" next="0x7f674c016e68" prev="0x7f674c016c48" upper="0x7f674c0376c0" lower="(nil)">// code to calculate our output goes here.<Finish/></txt><txt ptr="0x7f674c016e68" next="0x7f674c0171b0" prev="0x7f674c016d58" upper="0x7f674c0376c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c0171b0" next="0x7f674c0172c0" prev="0x7f674c016e68" upper="0x7f674c0376c0" lower="(nil)">assign seg_out[6] = <Finish/></txt><txt ptr="0x7f674c0172c0" next="0x7f674c0173d0" prev="0x7f674c0171b0" upper="0x7f674c0376c0" lower="(nil)">*<Finish/></txt><txt ptr="0x7f674c0173d0" next="0x7f674c0174e0" prev="0x7f674c0172c0" upper="0x7f674c0376c0" lower="(nil)">*(display_on) &amp;<Finish/></txt><txt ptr="0x7f674c0174e0" next="0x7f674c0175f0" prev="0x7f674c0173d0" upper="0x7f674c0376c0" lower="(nil)">*(<Finish/></txt><txt ptr="0x7f674c0175f0" next="0x7f674c017700" prev="0x7f674c0174e0" upper="0x7f674c0376c0" lower="(nil)">*(~bcd_in[3] &amp; ~bcd_in[2] &amp;   bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f674c017700" next="0x7f674c017810" prev="0x7f674c0175f0" upper="0x7f674c0376c0" lower="(nil)">*(~bcd_in[3] &amp; ~bcd_in[2] &amp;   bcd_in[1]  &amp;  bcd_in[0]) |<Finish/></txt><txt ptr="0x7f674c017810" next="0x7f674c017920" prev="0x7f674c017700" upper="0x7f674c0376c0" lower="(nil)">*(~bcd_in[3] &amp;  bcd_in[2] &amp;  ~bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f674c017920" next="0x7f674c017a30" prev="0x7f674c017810" upper="0x7f674c0376c0" lower="(nil)">*(~bcd_in[3] &amp;  bcd_in[2] &amp;  ~bcd_in[1]  &amp;  bcd_in[0]) |<Finish/></txt><txt ptr="0x7f674c017a30" next="0x7f674c017b40" prev="0x7f674c017920" upper="0x7f674c0376c0" lower="(nil)">*(~bcd_in[3] &amp;  bcd_in[2] &amp;   bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f674c017b40" next="0x7f674c017c50" prev="0x7f674c017a30" upper="0x7f674c0376c0" lower="(nil)">*( bcd_in[3] &amp; ~bcd_in[2] &amp;  ~bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f674c017c50" next="0x7f674c017d60" prev="0x7f674c017b40" upper="0x7f674c0376c0" lower="(nil)">*( bcd_in[3] &amp; ~bcd_in[2] &amp;  ~bcd_in[1]  &amp;  bcd_in[0]) <Finish/></txt><txt ptr="0x7f674c017d60" next="0x7f674c017e70" prev="0x7f674c017c50" upper="0x7f674c0376c0" lower="(nil)">*);<Finish/></txt><txt ptr="0x7f674c017e70" next="0x7f674c0180a8" prev="0x7f674c017d60" upper="0x7f674c0376c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c0180a8" next="0x7f674c0181b8" prev="0x7f674c017e70" upper="0x7f674c0376c0" lower="(nil)"><Finish/></txt><txt ptr="0x7f674c0181b8" next="0x7f674c0182c8" prev="0x7f674c0180a8" upper="0x7f674c0376c0" lower="(nil)">assign seg_out[5] = <Finish/></txt><txt ptr="0x7f674c0182c8" next="(nil)" prev="0x7f674c0181b8" upper="0x7f674c0376c0" lower="(nil)">*<Finish/></txt></body><footer ptr="0x7f674c0386c0" next="(nil)" prev="0x7f674c0376c0" upper="0x7f674c0357e0" lower="0x7f674c0170a0"><txt ptr="0x7f674c0170a0" next="(nil)" prev="(nil)" upper="0x7f674c0386c0" lower="(nil)"><Finish/></txt></footer></page><page ptr="0x7f674c0358c0" next="0x7f674c0359a0" prev="0x7f674c0357e0" upper="0x235b5d0" lower="0x7f674c037780"><body ptr="0x7f674c037780" next="0x7f674c038780" prev="(nil)" upper="0x7f674c0358c0" lower="0x7f674c0183d8"><txt ptr="0x7f674c0183d8" next="0x7f674c0184e8" prev="(nil)" upper="0x7f674c037780" lower="(nil)">*(display_on) &amp;<Finish/></txt><txt ptr="0x7f674c0184e8" next="0x7f674c0185f8" prev="0x7f674c0183d8" upper="0x7f674c037780" lower="(nil)">*(<Finish/></txt><txt ptr="0x7f674c0185f8" next="0x7f674c018708" prev="0x7f674c0184e8" upper="0x7f674c037780" lower="(nil)">*(~bcd_in[3] &amp; ~bcd_in[2] &amp; ~bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f674c018708" next="0x7f674c018818" prev="0x7f674c0185f8" upper="0x7f674c037780" lower="(nil)">*(~bcd_in[3] &amp; ~bcd_in[2] &amp; ~bcd_in[1]  &amp;  bcd_in[0]) |<Finish/></txt><txt ptr="0x7f674c018818" next="0x7f674c018928" prev="0x7f674c018708" upper="0x7f674c037780" lower="(nil)">*(~bcd_in[3] &amp; ~bcd_in[2] &amp;  bcd_in[1]  &amp;  bcd_in[0]) |<Finish/></txt><txt ptr="0x7f674c018928" next="0x7f674c018a38" prev="0x7f674c018818" upper="0x7f674c037780" lower="(nil)">*(~bcd_in[3] &amp;  bcd_in[2] &amp; ~bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f674c018a38" next="0x7f674c018b48" prev="0x7f674c018928" upper="0x7f674c037780" lower="(nil)">*(~bcd_in[3] &amp;  bcd_in[2] &amp; ~bcd_in[1]  &amp;  bcd_in[0]) |<Finish/></txt><txt ptr="0x7f674c018b48" next="0x7f674c018c58" prev="0x7f674c018a38" upper="0x7f674c037780" lower="(nil)">*(~bcd_in[3] &amp;  bcd_in[2] &amp;  bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f674c018c58" next="0x7f674c018d68" prev="0x7f674c018b48" upper="0x7f674c037780" lower="(nil)">*(~bcd_in[3] &amp;  bcd_in[2] &amp;  bcd_in[1]  &amp;  bcd_in[0]) |<Finish/></txt><txt ptr="0x7f674c018d68" next="0x7f674c018e78" prev="0x7f674c018c58" upper="0x7f674c037780" lower="(nil)">*( bcd_in[3] &amp; ~bcd_in[2] &amp; ~bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f674c018e78" next="0x7f67400a30b0" prev="0x7f674c018d68" upper="0x7f674c037780" lower="(nil)">*( bcd_in[3] &amp; ~bcd_in[2] &amp; ~bcd_in[1]  &amp;  bcd_in[0]) <Finish/></txt><txt ptr="0x7f67400a30b0" next="0x7f67400a31c0" prev="0x7f674c018e78" upper="0x7f674c037780" lower="(nil)"><Finish/></txt><txt ptr="0x7f67400a31c0" next="0x7f67400a32d0" prev="0x7f67400a30b0" upper="0x7f674c037780" lower="(nil)">*);<Finish/></txt><txt ptr="0x7f67400a32d0" next="0x7f67400a33e0" prev="0x7f67400a31c0" upper="0x7f674c037780" lower="(nil)"><Finish/></txt><txt ptr="0x7f67400a33e0" next="0x7f67400a34f0" prev="0x7f67400a32d0" upper="0x7f674c037780" lower="(nil)">assign seg_out[4] =<Finish/></txt><txt ptr="0x7f67400a34f0" next="0x7f67400a3600" prev="0x7f67400a33e0" upper="0x7f674c037780" lower="(nil)">*(display_on) &amp;<Finish/></txt><txt ptr="0x7f67400a3600" next="0x7f67400a3710" prev="0x7f67400a34f0" upper="0x7f674c037780" lower="(nil)">*(<Finish/></txt><txt ptr="0x7f67400a3710" next="0x7f67400a3820" prev="0x7f67400a3600" upper="0x7f674c037780" lower="(nil)">*(~bcd_in[3] &amp; ~bcd_in[2] &amp;  ~bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a3820" next="0x7f67400a3930" prev="0x7f67400a3710" upper="0x7f674c037780" lower="(nil)">*(~bcd_in[3] &amp; ~bcd_in[2] &amp;  ~bcd_in[1]  &amp;  bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a3930" next="0x7f67400a3a40" prev="0x7f67400a3820" upper="0x7f674c037780" lower="(nil)">*(~bcd_in[3] &amp; ~bcd_in[2] &amp;   bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a3a40" next="0x7f67400a3b50" prev="0x7f67400a3930" upper="0x7f674c037780" lower="(nil)">*(~bcd_in[3] &amp; ~bcd_in[2] &amp;   bcd_in[1]  &amp;  bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a3b50" next="0x7f67400a3c60" prev="0x7f67400a3a40" upper="0x7f674c037780" lower="(nil)">*(~bcd_in[3] &amp;  bcd_in[2] &amp;  ~bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a3c60" next="0x7f67400a3d70" prev="0x7f67400a3b50" upper="0x7f674c037780" lower="(nil)">*(~bcd_in[3] &amp;  bcd_in[2] &amp;   bcd_in[1]  &amp;  bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a3d70" next="0x7f67400a3e80" prev="0x7f67400a3c60" upper="0x7f674c037780" lower="(nil)">*( bcd_in[3] &amp; ~bcd_in[2] &amp;  ~bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a3e80" next="0x7f67400a40b8" prev="0x7f67400a3d70" upper="0x7f674c037780" lower="(nil)">*( bcd_in[3] &amp; ~bcd_in[2] &amp;  ~bcd_in[1]  &amp;  bcd_in[0]) <Finish/></txt><txt ptr="0x7f67400a40b8" next="0x7f67400a41c8" prev="0x7f67400a3e80" upper="0x7f674c037780" lower="(nil)"><Finish/></txt><txt ptr="0x7f67400a41c8" next="0x7f67400a42d8" prev="0x7f67400a40b8" upper="0x7f674c037780" lower="(nil)">*);<Finish/></txt><txt ptr="0x7f67400a42d8" next="0x7f67400a44f8" prev="0x7f67400a41c8" upper="0x7f674c037780" lower="(nil)"><Finish/></txt><txt ptr="0x7f67400a44f8" next="0x7f67400a4608" prev="0x7f67400a42d8" upper="0x7f674c037780" lower="(nil)">assign seg_out[3] =<Finish/></txt><txt ptr="0x7f67400a4608" next="0x7f67400a4718" prev="0x7f67400a44f8" upper="0x7f674c037780" lower="(nil)">*(display_on) &amp;<Finish/></txt><txt ptr="0x7f67400a4718" next="0x7f67400a4828" prev="0x7f67400a4608" upper="0x7f674c037780" lower="(nil)">*(<Finish/></txt><txt ptr="0x7f67400a4828" next="0x7f67400a4938" prev="0x7f67400a4718" upper="0x7f674c037780" lower="(nil)">*(~bcd_in[3] &amp; ~bcd_in[2] &amp;  ~bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a4938" next="0x7f67400a4a48" prev="0x7f67400a4828" upper="0x7f674c037780" lower="(nil)">*(~bcd_in[3] &amp; ~bcd_in[2] &amp;   bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a4a48" next="0x7f67400a4b58" prev="0x7f67400a4938" upper="0x7f674c037780" lower="(nil)">*(~bcd_in[3] &amp; ~bcd_in[2] &amp;   bcd_in[1]  &amp;  bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a4b58" next="0x7f67400a4c68" prev="0x7f67400a4a48" upper="0x7f674c037780" lower="(nil)">*(~bcd_in[3] &amp;  bcd_in[2] &amp;  ~bcd_in[1]  &amp;  bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a4c68" next="0x7f67400a4d78" prev="0x7f67400a4b58" upper="0x7f674c037780" lower="(nil)">*(~bcd_in[3] &amp;  bcd_in[2] &amp;   bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a4d78" next="0x7f67400a4e88" prev="0x7f67400a4c68" upper="0x7f674c037780" lower="(nil)">*(~bcd_in[3] &amp;  bcd_in[2] &amp;   bcd_in[1]  &amp;  bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a4e88" next="0x7f67400a50c0" prev="0x7f67400a4d78" upper="0x7f674c037780" lower="(nil)">*( bcd_in[3] &amp; ~bcd_in[2] &amp;  ~bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a50c0" next="0x7f67400a51d0" prev="0x7f67400a4e88" upper="0x7f674c037780" lower="(nil)">*( bcd_in[3] &amp; ~bcd_in[2] &amp;  ~bcd_in[1]  &amp;  bcd_in[0]) <Finish/></txt><txt ptr="0x7f67400a51d0" next="0x7f67400a52e0" prev="0x7f67400a50c0" upper="0x7f674c037780" lower="(nil)">*);<Finish/></txt><txt ptr="0x7f67400a52e0" next="0x7f67400a53f0" prev="0x7f67400a51d0" upper="0x7f674c037780" lower="(nil)"><Finish/></txt><txt ptr="0x7f67400a53f0" next="0x7f67400a5500" prev="0x7f67400a52e0" upper="0x7f674c037780" lower="(nil)">assign seg_out[2] =<Finish/></txt><txt ptr="0x7f67400a5500" next="0x7f67400a5610" prev="0x7f67400a53f0" upper="0x7f674c037780" lower="(nil)">*(display_on) &amp;<Finish/></txt><txt ptr="0x7f67400a5610" next="(nil)" prev="0x7f67400a5500" upper="0x7f674c037780" lower="(nil)">*(<Finish/></txt></body><footer ptr="0x7f674c038780" next="(nil)" prev="0x7f674c037780" upper="0x7f674c0358c0" lower="0x7f67400a43e8"><txt ptr="0x7f67400a43e8" next="(nil)" prev="(nil)" upper="0x7f674c038780" lower="(nil)"><Finish/></txt></footer></page><page ptr="0x7f674c0359a0" next="0x7f674c035a80" prev="0x7f674c0358c0" upper="0x235b5d0" lower="0x7f674c037840"><body ptr="0x7f674c037840" next="0x7f674c038840" prev="(nil)" upper="0x7f674c0359a0" lower="0x7f67400a5720"><txt ptr="0x7f67400a5720" next="0x7f67400a5830" prev="(nil)" upper="0x7f674c037840" lower="(nil)">*(~bcd_in[3] &amp; ~bcd_in[2] &amp;  ~bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a5830" next="0x7f67400a5940" prev="0x7f67400a5720" upper="0x7f674c037840" lower="(nil)">*(~bcd_in[3] &amp;  bcd_in[2] &amp;  ~bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a5940" next="0x7f67400a5a50" prev="0x7f67400a5830" upper="0x7f674c037840" lower="(nil)">*(~bcd_in[3] &amp;  bcd_in[2] &amp;  ~bcd_in[1]  &amp;  bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a5a50" next="0x7f67400a5b60" prev="0x7f67400a5940" upper="0x7f674c037840" lower="(nil)">*(~bcd_in[3] &amp;  bcd_in[2] &amp;   bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a5b60" next="0x7f67400a5c70" prev="0x7f67400a5a50" upper="0x7f674c037840" lower="(nil)">*( bcd_in[3] &amp; ~bcd_in[2] &amp;  ~bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a5c70" next="0x7f67400a5d80" prev="0x7f67400a5b60" upper="0x7f674c037840" lower="(nil)">*( bcd_in[3] &amp; ~bcd_in[2] &amp;  ~bcd_in[1]  &amp;  bcd_in[0]) <Finish/></txt><txt ptr="0x7f67400a5d80" next="0x7f67400a5e90" prev="0x7f67400a5c70" upper="0x7f674c037840" lower="(nil)">*);<Finish/></txt><txt ptr="0x7f67400a5e90" next="0x7f67400a60c8" prev="0x7f67400a5d80" upper="0x7f674c037840" lower="(nil)"><Finish/></txt><txt ptr="0x7f67400a60c8" next="0x7f67400a61d8" prev="0x7f67400a5e90" upper="0x7f674c037840" lower="(nil)">assign seg_out[1] = <Finish/></txt><txt ptr="0x7f67400a61d8" next="0x7f67400a62e8" prev="0x7f67400a60c8" upper="0x7f674c037840" lower="(nil)">*(display_on) &amp;<Finish/></txt><txt ptr="0x7f67400a62e8" next="0x7f67400a63f8" prev="0x7f67400a61d8" upper="0x7f674c037840" lower="(nil)">*(<Finish/></txt><txt ptr="0x7f67400a63f8" next="0x7f67400a6508" prev="0x7f67400a62e8" upper="0x7f674c037840" lower="(nil)">*(~bcd_in[3] &amp; ~bcd_in[2] &amp;  ~bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a6508" next="0x7f67400a6618" prev="0x7f67400a63f8" upper="0x7f674c037840" lower="(nil)">*(~bcd_in[3] &amp; ~bcd_in[2] &amp;   bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a6618" next="0x7f67400a6728" prev="0x7f67400a6508" upper="0x7f674c037840" lower="(nil)">*(~bcd_in[3] &amp;  bcd_in[2] &amp;   bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a6728" next="0x7f67400a6838" prev="0x7f67400a6618" upper="0x7f674c037840" lower="(nil)">*( bcd_in[3] &amp; ~bcd_in[2] &amp;  ~bcd_in[1]  &amp; ~bcd_in[0]) <Finish/></txt><txt ptr="0x7f67400a6838" next="0x7f67400a6948" prev="0x7f67400a6728" upper="0x7f674c037840" lower="(nil)">*);<Finish/></txt><txt ptr="0x7f67400a6948" next="0x7f67400a6a58" prev="0x7f67400a6838" upper="0x7f674c037840" lower="(nil)"><Finish/></txt><txt ptr="0x7f67400a6a58" next="0x7f67400a6b68" prev="0x7f67400a6948" upper="0x7f674c037840" lower="(nil)">assign seg_out[0] =<Finish/></txt><txt ptr="0x7f67400a6b68" next="0x7f67400a6c78" prev="0x7f67400a6a58" upper="0x7f674c037840" lower="(nil)">*(display_on) &amp;<Finish/></txt><txt ptr="0x7f67400a6c78" next="0x7f67400a6d88" prev="0x7f67400a6b68" upper="0x7f674c037840" lower="(nil)">*(<Finish/></txt><txt ptr="0x7f67400a6d88" next="0x7f67400a6e98" prev="0x7f67400a6c78" upper="0x7f674c037840" lower="(nil)">*(~bcd_in[3] &amp; ~bcd_in[2] &amp;  ~bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a6e98" next="0x7f67400a70d0" prev="0x7f67400a6d88" upper="0x7f674c037840" lower="(nil)">*(~bcd_in[3] &amp; ~bcd_in[2] &amp;   bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a70d0" next="0x7f67400a71e0" prev="0x7f67400a6e98" upper="0x7f674c037840" lower="(nil)">*(~bcd_in[3] &amp; ~bcd_in[2] &amp;   bcd_in[1]  &amp;  bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a71e0" next="0x7f67400a72f0" prev="0x7f67400a70d0" upper="0x7f674c037840" lower="(nil)">*(~bcd_in[3] &amp;  bcd_in[2] &amp;  ~bcd_in[1]  &amp;  bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a72f0" next="0x7f67400a7400" prev="0x7f67400a71e0" upper="0x7f674c037840" lower="(nil)">*(~bcd_in[3] &amp;  bcd_in[2] &amp;   bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a7400" next="0x7f67400a7510" prev="0x7f67400a72f0" upper="0x7f674c037840" lower="(nil)">*( bcd_in[3] &amp; ~bcd_in[2] &amp;  ~bcd_in[1]  &amp; ~bcd_in[0]) |<Finish/></txt><txt ptr="0x7f67400a7510" next="0x7f67400a7620" prev="0x7f67400a7400" upper="0x7f674c037840" lower="(nil)">*( bcd_in[3] &amp; ~bcd_in[2] &amp;  ~bcd_in[1]  &amp;  bcd_in[0]) <Finish/></txt><txt ptr="0x7f67400a7620" next="0x7f67400a7840" prev="0x7f67400a7510" upper="0x7f674c037840" lower="(nil)">*);<Finish/></txt><txt ptr="0x7f67400a7840" next="0x7f67400a7950" prev="0x7f67400a7620" upper="0x7f674c037840" lower="(nil)"><Finish/></txt><txt ptr="0x7f67400a7950" next="0x7f67400a7a60" prev="0x7f67400a7840" upper="0x7f674c037840" lower="(nil)"><Finish/></txt><txt ptr="0x7f67400a7a60" next="0x7f67400a7b70" prev="0x7f67400a7950" upper="0x7f674c037840" lower="(nil)"><Finish/></txt><txt ptr="0x7f67400a7b70" next="0x7f67400a7c80" prev="0x7f67400a7a60" upper="0x7f674c037840" lower="(nil)">endmodule<Finish/></txt><txt ptr="0x7f67400a7c80" next="0x7f67400a7d90" prev="0x7f67400a7b70" upper="0x7f674c037840" lower="(nil)"><Finish/></txt><txt ptr="0x7f67400a7d90" next="(nil)" prev="0x7f67400a7c80" upper="0x7f674c037840" lower="(nil)"><Finish/></txt></body><footer ptr="0x7f674c038840" next="(nil)" prev="0x7f674c037840" upper="0x7f674c0359a0" lower="0x7f67400a7730"><txt ptr="0x7f67400a7730" next="(nil)" prev="(nil)" upper="0x7f674c038840" lower="(nil)"><Finish/></txt></footer></page><page ptr="0x7f674c035a80" next="0x7f674c035b60" prev="0x7f674c0359a0" upper="0x235b5d0" lower="0x7f674c037900"><body ptr="0x7f674c037900" next="0x7f674c038900" prev="(nil)" upper="0x7f674c035a80" lower="0x7f67400a7ea0"><txt ptr="0x7f67400a7ea0" next="0x7f67400a81e8" prev="(nil)" upper="0x7f674c037900" lower="(nil)">tb_svn_seg_module.txt<Finish/></txt><txt ptr="0x7f67400a81e8" next="0x7f67400a82f8" prev="0x7f67400a7ea0" upper="0x7f674c037900" lower="(nil)"><Finish/></txt><txt ptr="0x7f67400a82f8" next="0x7f67400a8408" prev="0x7f67400a81e8" upper="0x7f674c037900" lower="(nil)">//<Finish/></txt><txt ptr="0x7f67400a8408" next="0x7f67400a8518" prev="0x7f67400a82f8" upper="0x7f674c037900" lower="(nil)">// lab3 : version 09/06/2012<Finish/></txt><txt ptr="0x7f67400a8518" next="0x7f67400a8628" prev="0x7f67400a8408" upper="0x7f674c037900" lower="(nil)">//                 <Finish/></txt><txt ptr="0x7f67400a8628" next="0x7f67400a8738" prev="0x7f67400a8518" upper="0x7f674c037900" lower="(nil)">// This file contains the test vectors for the<Finish/></txt><txt ptr="0x7f67400a8738" next="0x7f67400a8848" prev="0x7f67400a8628" upper="0x7f674c037900" lower="(nil)">// 7 segment decoder<Finish/></txt><txt ptr="0x7f67400a8848" next="0x7f67400a8958" prev="0x7f67400a8738" upper="0x7f674c037900" lower="(nil)">// The first column is the input display_on signal<Finish/></txt><txt ptr="0x7f67400a8958" next="0x7f67400a8a68" prev="0x7f67400a8848" upper="0x7f674c037900" lower="(nil)">// The next four columns are the inputs: bcd_in[3:0]<Finish/></txt><txt ptr="0x7f67400a8a68" next="0x7f67400a8b78" prev="0x7f67400a8958" upper="0x7f674c037900" lower="(nil)">// The next 7 columns are the signals to the display:<Finish/></txt><txt ptr="0x7f67400a8b78" next="0x7f67400a8c88" prev="0x7f67400a8a68" upper="0x7f674c037900" lower="(nil)">// seg_out[6:0], representing the g,f,e,d,c,b,a segments.<Finish/></txt><txt ptr="0x7f67400a8c88" next="0x7f67400a8d98" prev="0x7f67400a8b78" upper="0x7f674c037900" lower="(nil)">//<Finish/></txt><txt ptr="0x7f67400a8d98" next="0x7f67400a8ea8" prev="0x7f67400a8c88" upper="0x7f674c037900" lower="(nil)">// This needs to be 32 lines long to cover all possibilities<Finish/></txt><txt ptr="0x7f67400a8ea8" next="0x7f67400a90e0" prev="0x7f67400a8d98" upper="0x7f674c037900" lower="(nil)">//<Finish/></txt><txt ptr="0x7f67400a90e0" next="0x7f67400a91f0" prev="0x7f67400a8ea8" upper="0x7f674c037900" lower="(nil)">/* This is what they gave me, but I am going to just comment it all<Finish/></txt><txt ptr="0x7f67400a91f0" next="0x7f67400a9300" prev="0x7f67400a90e0" upper="0x7f674c037900" lower="(nil)">out and then start over with my own generated file.<Finish/></txt><txt ptr="0x7f67400a9300" next="0x7f67400a9410" prev="0x7f67400a91f0" upper="0x7f674c037900" lower="(nil)"><Finish/></txt><txt ptr="0x7f67400a9410" next="0x7f67400a9520" prev="0x7f67400a9300" upper="0x7f674c037900" lower="(nil)">1_0000_0111111<Finish/></txt><txt ptr="0x7f67400a9520" next="0x7f67400a9630" prev="0x7f67400a9410" upper="0x7f674c037900" lower="(nil)">1_0001_0110000<Finish/></txt><txt ptr="0x7f67400a9630" next="0x7f67400a9740" prev="0x7f67400a9520" upper="0x7f674c037900" lower="(nil)"><Finish/></txt><txt ptr="0x7f67400a9740" next="0x7f67400a9850" prev="0x7f67400a9630" upper="0x7f674c037900" lower="(nil)">I basically copied this data from the excel sheet truth table and then used<Finish/></txt><txt ptr="0x7f67400a9850" next="0x7f67400a9960" prev="0x7f67400a9740" upper="0x7f674c037900" lower="(nil)">tr -d '\t' &lt;test.txt &gt;&gt; tb_svn_seg_decoder.txt<Finish/></txt><txt ptr="0x7f67400a9960" next="0x7f67400a9a70" prev="0x7f67400a9850" upper="0x7f674c037900" lower="(nil)">to strip it of the tab delimiters.<Finish/></txt><txt ptr="0x7f67400a9a70" next="0x7f67400a9b80" prev="0x7f67400a9960" upper="0x7f674c037900" lower="(nil)">*/<Finish/></txt><txt ptr="0x7f67400a9b80" next="0x7f67400a9c90" prev="0x7f67400a9a70" upper="0x7f674c037900" lower="(nil)"><Finish/></txt><txt ptr="0x7f67400a9c90" next="0x7f67400a9da0" prev="0x7f67400a9b80" upper="0x7f674c037900" lower="(nil)"><Finish/></txt><txt ptr="0x7f67400a9da0" next="0x7f67400a9eb0" prev="0x7f67400a9c90" upper="0x7f674c037900" lower="(nil)">1_0000_0111111<Finish/></txt><txt ptr="0x7f67400a9eb0" next="0x7f67400aa0e8" prev="0x7f67400a9da0" upper="0x7f674c037900" lower="(nil)">1_0001_0110000<Finish/></txt><txt ptr="0x7f67400aa0e8" next="0x7f67400aa1f8" prev="0x7f67400a9eb0" upper="0x7f674c037900" lower="(nil)">1_0010_1011011<Finish/></txt><txt ptr="0x7f67400aa1f8" next="0x7f67400aa308" prev="0x7f67400aa0e8" upper="0x7f674c037900" lower="(nil)">1_0011_1111001<Finish/></txt><txt ptr="0x7f67400aa308" next="0x7f67400aa418" prev="0x7f67400aa1f8" upper="0x7f674c037900" lower="(nil)">1_0100_1110100<Finish/></txt><txt ptr="0x7f67400aa418" next="0x7f67400aa528" prev="0x7f67400aa308" upper="0x7f674c037900" lower="(nil)">1_0101_1101101<Finish/></txt><txt ptr="0x7f67400aa528" next="0x7f67400aa638" prev="0x7f67400aa418" upper="0x7f674c037900" lower="(nil)">1_0110_1101111<Finish/></txt><txt ptr="0x7f67400aa638" next="0x7f67400aa748" prev="0x7f67400aa528" upper="0x7f674c037900" lower="(nil)">1_0111_0111000<Finish/></txt><txt ptr="0x7f67400aa748" next="0x7f67400aa858" prev="0x7f67400aa638" upper="0x7f674c037900" lower="(nil)">1_1000_1111111<Finish/></txt><txt ptr="0x7f67400aa858" next="0x7f67400aa968" prev="0x7f67400aa748" upper="0x7f674c037900" lower="(nil)">1_1001_1111101<Finish/></txt><txt ptr="0x7f67400aa968" next="0x7f67400aaa78" prev="0x7f67400aa858" upper="0x7f674c037900" lower="(nil)">1_1010_0000000<Finish/></txt><txt ptr="0x7f67400aaa78" next="0x7f67400aab88" prev="0x7f67400aa968" upper="0x7f674c037900" lower="(nil)">1_1011_0000000<Finish/></txt><txt ptr="0x7f67400aab88" next="0x7f67400aac98" prev="0x7f67400aaa78" upper="0x7f674c037900" lower="(nil)">1_1100_0000000<Finish/></txt><txt ptr="0x7f67400aac98" next="0x7f67400aada8" prev="0x7f67400aab88" upper="0x7f674c037900" lower="(nil)">1_1101_0000000<Finish/></txt><txt ptr="0x7f67400aada8" next="0x7f67400aaeb8" prev="0x7f67400aac98" upper="0x7f674c037900" lower="(nil)">1_1110_0000000<Finish/></txt><txt ptr="0x7f67400aaeb8" next="0x7f67400ab0f0" prev="0x7f67400aada8" upper="0x7f674c037900" lower="(nil)">1_1111_0000000<Finish/></txt><txt ptr="0x7f67400ab0f0" next="(nil)" prev="0x7f67400aaeb8" upper="0x7f674c037900" lower="(nil)">0_0000_0000000<Finish/></txt></body><footer ptr="0x7f674c038900" next="(nil)" prev="0x7f674c037900" upper="0x7f674c035a80" lower="0x7f67400a80d8"><txt ptr="0x7f67400a80d8" next="(nil)" prev="(nil)" upper="0x7f674c038900" lower="(nil)"><Finish/></txt></footer></page><page ptr="0x7f674c035b60" next="(nil)" prev="0x7f674c035a80" upper="0x235b5d0" lower="0x7f674c0379c0"><body ptr="0x7f674c0379c0" next="0x7f674c0389c0" prev="(nil)" upper="0x7f674c035b60" lower="0x7f67400ab200"><txt ptr="0x7f67400ab200" next="0x7f67400ab310" prev="(nil)" upper="0x7f674c0379c0" lower="(nil)">0_0001_0000000<Finish/></txt><txt ptr="0x7f67400ab310" next="0x7f67400ab530" prev="0x7f67400ab200" upper="0x7f674c0379c0" lower="(nil)">0_0010_0000000<Finish/></txt><txt ptr="0x7f67400ab530" next="0x7f67400ab640" prev="0x7f67400ab310" upper="0x7f674c0379c0" lower="(nil)">0_0011_0000000<Finish/></txt><txt ptr="0x7f67400ab640" next="0x7f67400ab750" prev="0x7f67400ab530" upper="0x7f674c0379c0" lower="(nil)">0_0100_0000000<Finish/></txt><txt ptr="0x7f67400ab750" next="0x7f67400ab860" prev="0x7f67400ab640" upper="0x7f674c0379c0" lower="(nil)">0_0101_0000000<Finish/></txt><txt ptr="0x7f67400ab860" next="0x7f67400ab970" prev="0x7f67400ab750" upper="0x7f674c0379c0" lower="(nil)">0_0110_0000000<Finish/></txt><txt ptr="0x7f67400ab970" next="0x7f67400aba80" prev="0x7f67400ab860" upper="0x7f674c0379c0" lower="(nil)">0_0111_0000000<Finish/></txt><txt ptr="0x7f67400aba80" next="0x7f67400abb90" prev="0x7f67400ab970" upper="0x7f674c0379c0" lower="(nil)">0_1000_0000000<Finish/></txt><txt ptr="0x7f67400abb90" next="0x7f67400abca0" prev="0x7f67400aba80" upper="0x7f674c0379c0" lower="(nil)">0_1001_0000000<Finish/></txt><txt ptr="0x7f67400abca0" next="0x7f67400abdb0" prev="0x7f67400abb90" upper="0x7f674c0379c0" lower="(nil)">0_1010_0000000<Finish/></txt><txt ptr="0x7f67400abdb0" next="0x7f67400abec0" prev="0x7f67400abca0" upper="0x7f674c0379c0" lower="(nil)">0_1011_0000000<Finish/></txt><txt ptr="0x7f67400abec0" next="0x7f67400ac000" prev="0x7f67400abdb0" upper="0x7f674c0379c0" lower="(nil)">0_1100_0000000<Finish/></txt><txt ptr="0x7f67400ac000" next="0x7f67400ac110" prev="0x7f67400abec0" upper="0x7f674c0379c0" lower="(nil)">0_1101_0000000<Finish/></txt><txt ptr="0x7f67400ac110" next="0x7f67400ac220" prev="0x7f67400ac000" upper="0x7f674c0379c0" lower="(nil)">0_1110_0000000<Finish/></txt><txt ptr="0x7f67400ac220" next="0x7f67400ac330" prev="0x7f67400ac110" upper="0x7f674c0379c0" lower="(nil)">0_1111_0000000<Finish/></txt><txt ptr="0x7f67400ac330" next="(nil)" prev="0x7f67400ac220" upper="0x7f674c0379c0" lower="(nil)"> <Finish/></txt></body><footer ptr="0x7f674c0389c0" next="(nil)" prev="0x7f674c0379c0" upper="0x7f674c035b60" lower="0x7f67400ab420"><txt ptr="0x7f67400ab420" next="(nil)" prev="(nil)" upper="0x7f674c0389c0" lower="(nil)"><Finish/></txt></footer></page></root>
